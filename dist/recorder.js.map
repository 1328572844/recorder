{"version":3,"sources":["webpack://Recorder/webpack/universalModuleDefinition","webpack://Recorder/webpack/bootstrap","webpack://Recorder/./src/recorder.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Recorder","options","this","buffer","inputSampleBits","context","AudioContext","webkitAudioContext","inputSampleRate","sampleRate","config","sampleBits","indexOf","numChannels","outputSampleRate","oututSampleBits","initRecorder","_this","destroy","analyser","createAnalyser","fftSize","createScript","createScriptProcessor","createJavaScriptNode","recorder","apply","initUserMedia","onaudioprocess","e","data","inputBuffer","getChannelData","push","Float32Array","size","length","lData","rData","ArrayBuffer","byteLength","dData","offset","duration","onprocess","start","isrecording","clear","navigator","mediaDevices","getUserMedia","audio","video","then","stream","audioInput","createMediaStreamSource","error","throwError","message","connect","destination","pause","ispause","disconnect","resume","stop","play","source","decodeAudioData","getWAV","createBufferSource","getRecordAnalyseData","dataArray","Uint8Array","frequencyBinCount","getByteTimeDomainData","getPlayAnalyseData","undefined","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","resolve","reject","Error","getPCM","flat","compress","encodePCM","getPCMBlob","Blob","downloadPCM","pcmBlob","download","pcmTemp","encodeWAV","getWAVBlob","type","downloadWAV","wavBlob","fn","close","blob","oA","document","createElement","href","URL","createObjectURL","click","PCMData","set","playAudio","oAudio","src","compression","Math","max","floor","result","index","j","bytes","dataLength","DataView","val","min","setInt8","setInt16","channelCount","writeString","setUint32","setUint16","setUint8","getUint8","str","charCodeAt","default"],"mappings":"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","file":"recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// import * as lamejs from 'lamejs';\r\n\r\ndeclare let window: any;\r\ndeclare let Math: any;\r\ndeclare let document: any;\r\ndeclare let navigator: any;\r\ndeclare let Promise: any;\r\n\r\n// 构造函数参数格式\r\ninterface recorderConfig {\r\n    sampleBits?: number,         // 采样位数\r\n    sampleRate?: number,         // 采样率\r\n    numChannels?: number,        // 声道数\r\n}\r\n\r\ninterface dataview {\r\n    byteLength: number,\r\n    buffer: {\r\n        byteLength: number,\r\n    },\r\n    getUint8: any,\r\n}\r\n\r\nclass Recorder {\r\n    private isrecording: boolean;               // 是否正在录音\r\n    private ispause: boolean;                   // 是否是暂停\r\n    private context: any;\r\n    private config: recorderConfig;             // 配置\r\n    private size: number;                       // 录音文件总长度\r\n    private buffer: Array<Float32Array> = [];   // pcm音频数据搜集器\r\n    private PCMData: any;                       // 存放解析完成的pcm数据\r\n    private audioInput: any;\r\n    private inputSampleRate: number;            // 输入采样率\r\n    private source: any;                        // 音频输入\r\n    private recorder: any;\r\n    private inputSampleBits: number = 16;       // 输入采样位数\r\n    private outputSampleRate: number;           // 输出采样率\r\n    private oututSampleBits: number;            // 输出采样位数\r\n    private analyser: any;\r\n\r\n    public duration: number;                 // 录音时长\r\n    // 正在录音时间，参数是已经录了多少时间了\r\n    public onprocess: (duration: number) => void; \r\n    /**\r\n     * @param {Object} options 包含以下三个参数：\r\n     * sampleBits，采样位数，一般8,16，默认16\r\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\r\n     * numChannels，声道，1或2\r\n     */\r\n    constructor(options: recorderConfig = {}) {\r\n        // 临时audioContext，为了获取输入采样率的\r\n        let context = new (window.AudioContext || window.webkitAudioContext)();\r\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\r\n\r\n        // 配置config，检查值是否有问题\r\n        this.config = {\r\n            // 采样数位 8, 16\r\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\r\n            // 采样率\r\n            sampleRate: ~[11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\r\n            // 声道数，1或2\r\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\r\n        };\r\n        // 设置采样的参数\r\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\r\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\r\n    }\r\n\r\n    /** \r\n     * 初始化录音实例\r\n     */\r\n    initRecorder(): void {\r\n        if (this.context) {\r\n            // 关闭先前的录音实例，因为前次的实例会缓存少量数据\r\n            this.destroy();\r\n        }\r\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\r\n        \r\n        this.analyser = this.context.createAnalyser();  // 录音分析节点\r\n        this.analyser.fftSize = 2048;                   // 表示存储频域的大小\r\n\r\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\r\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\r\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\r\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\r\n\r\n        // 兼容 getUserMedia\r\n        this.initUserMedia();\r\n        // 音频采集\r\n        this.recorder.onaudioprocess = e => {\r\n            // getChannelData返回Float32Array类型的pcm数据\r\n            if (1 === this.config.numChannels) {\r\n                let data = e.inputBuffer.getChannelData(0);\r\n                // 单通道\r\n                this.buffer.push(new Float32Array(data));\r\n                this.size += data.length;\r\n            } else {\r\n                /*\r\n                 * 双声道处理\r\n                 * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\r\n                 * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\r\n                 */\r\n                let lData = new Float32Array(e.inputBuffer.getChannelData(0)),\r\n                    rData = new Float32Array(e.inputBuffer.getChannelData(1)),\r\n                    // 新的数据为左声道和右声道数据量之和\r\n                    buffer = new ArrayBuffer(lData.byteLength + rData.byteLength),\r\n                    dData = new Float32Array(buffer),\r\n                    offset = 0;\r\n\r\n                for (let i = 0; i < lData.byteLength; ++i) {\r\n                    dData[ offset ] = lData[i];\r\n                    offset++;\r\n                    dData[ offset ] = rData[i];\r\n                    offset++;\r\n                }\r\n\r\n                this.buffer.push(dData);\r\n                this.size += offset;\r\n            }\r\n            // 统计录音时长\r\n            this.duration += 4096 / this.inputSampleRate;\r\n            // 录音时长回调\r\n            this.onprocess && this.onprocess(this.duration);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 开始录音\r\n     *\r\n     * @returns {void}\r\n     * @memberof Recorder\r\n     */\r\n    start(): void {\r\n        if (this.isrecording) {\r\n            // 正在录音，则不允许\r\n            return;\r\n        }\r\n        // 清空数据\r\n        this.clear();\r\n        this.initRecorder();\r\n        this.isrecording = true;\r\n\r\n        navigator.mediaDevices.getUserMedia({\r\n            audio: true,\r\n            video: false\r\n        }).then(stream => {\r\n            // audioInput表示音频源节点\r\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\r\n            this.audioInput = this.context.createMediaStreamSource(stream);\r\n        }, error => {\r\n            // 抛出异常\r\n            Recorder.throwError(error.name + \" : \" + error.message);\r\n        }).then(() => {\r\n            // audioInput 为声音源，连接到处理节点 recorder\r\n            this.audioInput.connect(this.analyser);\r\n            this.analyser.connect(this.recorder);\r\n            // 处理节点 recorder 连接到扬声器\r\n            this.recorder.connect(this.context.destination);\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * 暂停录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    pause(): void {\r\n        if (this.isrecording && !this.ispause) {\r\n            this.ispause = true;\r\n            // 当前不暂停的时候才可以暂停\r\n            this.recorder.disconnect();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 继续录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    resume(): void {\r\n        if (this.isrecording && this.ispause) {\r\n            this.ispause = false;\r\n            // 暂停的才可以开始\r\n            this.audioInput && this.audioInput.connect(this.analyser);\r\n            this.analyser.connect(this.recorder);\r\n            // 处理节点 recorder 连接到扬声器\r\n            this.recorder.connect(this.context.destination);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 停止录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    stop(): void {\r\n        this.isrecording = false;\r\n        this.audioInput && this.audioInput.disconnect();\r\n        this.recorder.disconnect();\r\n    }\r\n\r\n    /**\r\n     * 播放录音\r\n     *\r\n     * @memberof Recorder\r\n     */\r\n    play(): void {\r\n        this.stop();\r\n        // 关闭前一次音频播放\r\n        this.source && this.source.stop();\r\n\r\n        this.context.decodeAudioData(this.getWAV().buffer, buffer => {\r\n            this.source = this.context.createBufferSource();\r\n\r\n            // 设置数据\r\n            this.source.buffer = buffer;\r\n            // connect到分析器，还是用录音的，因为播放时时不能录音的\r\n            this.source.connect(this.analyser);\r\n            this.analyser.connect(this.context.destination);\r\n            this.source.start();\r\n        }, function(e) {\r\n            Recorder.throwError(e);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 获取当前录音的波形数据，\r\n     * 调取频率由外部控制。\r\n     * \r\n     * @memberof Recorder\r\n     */\r\n    getRecordAnalyseData() {\r\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\r\n        // 将数据拷贝到dataArray中。\r\n        this.analyser.getByteTimeDomainData(dataArray);\r\n\r\n        return dataArray;\r\n    }\r\n\r\n    /**\r\n     * 获取录音播放时的波形数据，\r\n     * \r\n     * @memberof Recorder\r\n     */\r\n    getPlayAnalyseData() {\r\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\r\n        return this.getRecordAnalyseData();\r\n    }\r\n    \r\n    // getUserMedia 版本兼容\r\n    private initUserMedia() {\r\n        if (navigator.mediaDevices === undefined) {\r\n            navigator.mediaDevices = {};\r\n        }\r\n        \r\n        if (navigator.mediaDevices.getUserMedia === undefined) {\r\n            navigator.mediaDevices.getUserMedia = function(constraints) {\r\n                var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\r\n                \r\n                if (!getUserMedia) {\r\n                    return Promise.reject(new Error('浏览器不支持 getUserMedia '));\r\n                }\r\n                \r\n                return new Promise(function(resolve, reject) {\r\n                    getUserMedia.call(navigator, constraints, resolve, reject);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 获取PCM编码的二进制数据(dataview)\r\n     *\r\n     * @returns {dataview}  PCM二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    private getPCM() {\r\n        // 二维转一维\r\n        let data = this.flat();\r\n        // 压缩或扩展\r\n        data = Recorder.compress(data, this.inputSampleRate, this.outputSampleRate);\r\n        // 按采样位数重新编码\r\n        return Recorder.encodePCM(data, this.oututSampleBits);\r\n    }\r\n\r\n    /**\r\n     * 获取PCM格式的blob数据\r\n     *\r\n     * @returns { blob }  PCM格式的blob数据\r\n     * @memberof Recorder\r\n     */\r\n    getPCMBlob() {\r\n        return new Blob([ this.getPCM() ]);\r\n    }\r\n\r\n    /**\r\n     * 下载录音pcm数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    downloadPCM(name: string = 'recorder'): void {\r\n        // 先停止\r\n        this.stop();\r\n        let pcmBlob = this.getPCMBlob();\r\n        \r\n        this.download(pcmBlob, name, 'pcm');\r\n    }\r\n\r\n    /**\r\n     * 获取WAV编码的二进制数据(dataview)\r\n     *\r\n     * @returns {dataview}  WAV编码的二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    private getWAV() {\r\n        let pcmTemp = this.getPCM(),\r\n            wavTemp = Recorder.encodeWAV(pcmTemp, this.inputSampleRate, \r\n                this.outputSampleRate, this.config.numChannels, this.oututSampleBits);\r\n\r\n        return wavTemp;\r\n    }\r\n\r\n    /**\r\n     * 获取WAV音频的blob数据\r\n     *\r\n     * @returns { blob }    wav格式blob数据\r\n     * @memberof Recorder\r\n     */\r\n    getWAVBlob() {\r\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\r\n    }\r\n\r\n    /**\r\n     * 下载录音的wav数据\r\n     *\r\n     * @param {string} [name='recorder']    重命名的名字\r\n     * @memberof Recorder\r\n     */\r\n    downloadWAV(name: string = 'recorder'): void {\r\n        // 先停止\r\n        this.stop();\r\n        let wavBlob = this.getWAVBlob();\r\n        \r\n        this.download(wavBlob, name, 'wav');\r\n    }\r\n\r\n    /**\r\n     * 销毁录音对象\r\n     * @param {*} fn        回调函数\r\n     * @memberof Recorder\r\n     */\r\n    destroy(fn?): void {\r\n        this.context.close().then(() => {\r\n            fn && fn.call(this);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 下载录音文件\r\n     * @private\r\n     * @param {*} blob      blob数据\r\n     * @param {string} name 下载的文件名\r\n     * @param {string} type 下载的文件后缀\r\n     * @memberof Recorder\r\n     */\r\n    private download(blob, name: string, type: string): void {\r\n        try {\r\n            let oA = document.createElement('a');\r\n            \r\n            oA.href = window.URL.createObjectURL(blob);\r\n            oA.download = name + '.' + type;\r\n            oA.click();\r\n        } catch(e) {\r\n            Recorder.throwError(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 清空状态，重新开始录音（变量初始化）\r\n     *\r\n     * @private\r\n     * @memberof Recorder\r\n     */\r\n    private clear(): void {\r\n        this.buffer.length = 0;\r\n        this.size = 0;\r\n        this.PCMData = null;\r\n        this.audioInput = null;\r\n        this.duration = 0;\r\n        this.ispause = false;\r\n\r\n        // 录音前，关闭录音播放\r\n        this.source && this.source.stop();\r\n    }\r\n\r\n    /**\r\n     * 将二维数组转一维\r\n     * \r\n     * @private\r\n     * @returns  {float32array}     音频pcm二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    private flat() {\r\n        if (this.PCMData) {\r\n            return this.PCMData;\r\n        }\r\n        // 合并\r\n        let data = new Float32Array(this.size),\r\n            offset = 0; // 偏移量计算\r\n\r\n        // 将二维数据，转成一维数据\r\n        for (let i = 0; i < this.buffer.length; i++) {\r\n            data.set(this.buffer[i], offset);\r\n            offset += this.buffer[i].length;\r\n        }\r\n\r\n        return this.PCMData = data;\r\n    }\r\n\r\n    /** \r\n     * 播放外部音乐文件\r\n     * \r\n     * @param {float32array} blob    blob音频数据\r\n     * @memberof Recorder\r\n     */\r\n    static playAudio(blob): void {\r\n        let oAudio = document.createElement('audio');\r\n\r\n        oAudio.src = window.URL.createObjectURL(blob);\r\n        // 播放音乐\r\n        oAudio.play();\r\n    }\r\n\r\n    /**\r\n     * 数据合并压缩\r\n     * 根据输入和输出的采样率压缩数据，\r\n     * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\r\n     * 所以输入数据中每隔3取1位\r\n     * \r\n     * @static\r\n     * @param {float32array} data       [-1, 1]的pcm数据\r\n     * @param {number} inputSampleRate  输入采样率\r\n     * @param {number} outputSampleRate 输出采样率\r\n     * @returns  {float32array}         压缩处理后的二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    static compress(data, inputSampleRate: number, outputSampleRate: number) {\r\n        // 压缩，根据采样率进行压缩\r\n        let compression = Math.max(Math.floor(inputSampleRate / outputSampleRate), 1),\r\n            length = data.length / compression,\r\n            result = new Float32Array(length),\r\n            index = 0, j = 0;\r\n\r\n        // 循环间隔 compression 位取一位数据\r\n        while (index < length) {\r\n            result[index] = data[j];\r\n            j += compression;\r\n            index++;\r\n        }\r\n        // 返回压缩后的一维数据\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * 转换到我们需要的对应格式的编码\r\n     * \r\n     * @static\r\n     * @param {float32array} bytes      pcm二进制数据\r\n     * @param {number} sampleBits       采样位数\r\n     * @returns {dataview}              pcm二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    static encodePCM(bytes, sampleBits: number)  {\r\n        let offset = 0,\r\n            dataLength = bytes.length * (sampleBits / 8),\r\n            buffer = new ArrayBuffer(dataLength),\r\n            data = new DataView(buffer);\r\n    \r\n        // 写入采样数据\r\n        if (sampleBits === 8) {\r\n            for (var i = 0; i < bytes.length; i++, offset++) {\r\n                // 范围[-1, 1]\r\n                var s = Math.max(-1, Math.min(1, bytes[i]));\r\n                // 8位采样位划分成2^8=256份，它的范围是0-255; \r\n                // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\r\n                var val = s < 0 ? s * 128 : s * 127;\r\n                val = +val + 128;\r\n                data.setInt8(offset, val);\r\n            }\r\n        } else {\r\n            for (var i = 0; i < bytes.length; i++, offset += 2) {\r\n                var s = Math.max(-1, Math.min(1, bytes[i]));\r\n                // 16位的划分的是2^16=65536份，范围是-32768到32767\r\n                // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\r\n                data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);\r\n            }\r\n        }\r\n    \r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\r\n     * 所以，此处只需要在pcm数据前增加下就行了。\r\n     * \r\n     * @static\r\n     * @param {DataView} bytes           pcm二进制数据\r\n     * @param {Number} inputSampleRate   输入采样率\r\n     * @param {Number} outputSampleRate  输出采样率\r\n     * @param {Number} numChannels       声道数\r\n     * @param {Number} oututSampleBits   输出采样位数\r\n     * @returns {DataView}               wav二进制数据\r\n     * @memberof Recorder\r\n     */\r\n    static encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number) {\r\n        let sampleRate = Math.min(inputSampleRate, outputSampleRate),\r\n            sampleBits = oututSampleBits,\r\n            buffer = new ArrayBuffer(44 + bytes.byteLength),\r\n            data = new DataView(buffer),\r\n            channelCount = numChannels, // 声道\r\n            offset = 0;\r\n    \r\n        // 资源交换文件标识符\r\n        writeString(data, offset, 'RIFF'); offset += 4;\r\n        // 下个地址开始到文件尾总字节数,即文件大小-8\r\n        data.setUint32(offset, 36 + bytes.byteLength, true); offset += 4;\r\n        // WAV文件标志\r\n        writeString(data, offset, 'WAVE'); offset += 4;\r\n        // 波形格式标志\r\n        writeString(data, offset, 'fmt '); offset += 4;\r\n        // 过滤字节,一般为 0x10 = 16\r\n        data.setUint32(offset, 16, true); offset += 4;\r\n        // 格式类别 (PCM形式采样数据)\r\n        data.setUint16(offset, 1, true); offset += 2;\r\n        // 声道数\r\n        data.setUint16(offset, channelCount, true); offset += 2;\r\n        // 采样率,每秒样本数,表示每个通道的播放速度\r\n        data.setUint32(offset, sampleRate, true); offset += 4;\r\n        // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\r\n        data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), true); offset += 4;\r\n        // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\r\n        data.setUint16(offset, channelCount * (sampleBits / 8), true); offset += 2;\r\n        // 采样位数\r\n        data.setUint16(offset, sampleBits, true); offset += 2;\r\n        // 数据标识符\r\n        writeString(data, offset, 'data'); offset += 4;\r\n        // 采样数据总数,即数据总大小-44\r\n        data.setUint32(offset, bytes.byteLength, true); offset += 4;\r\n        \r\n        // 给wav头增加pcm体\r\n        for (let i = 0; i < bytes.byteLength;) {\r\n            data.setUint8(offset, bytes.getUint8(i));\r\n            offset++;\r\n            i++;\r\n        }\r\n    \r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * 异常处理\r\n     * @static\r\n     * @param {*} message   错误消息\r\n     * @memberof Recorder\r\n     */\r\n    static throwError(message) {\r\n        throw new Error (message);\r\n    }\r\n}\r\n\r\n/**\r\n * 在data中的offset位置开始写入str字符串\r\n * @param {TypedArrays} data    二进制数据\r\n * @param {Number}      offset  偏移量\r\n * @param {String}      str     字符串\r\n */\r\nfunction writeString(data, offset, str): void {\r\n    for (var i = 0; i < str.length; i++) {\r\n        data.setUint8(offset + i, str.charCodeAt(i));\r\n    }\r\n}\r\n\r\nexport default Recorder;"],"sourceRoot":""}