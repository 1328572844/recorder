{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/recorder.ts","webpack://[name]/./src/download/download.ts","webpack://[name]/./src/transform/transform.ts","webpack://[name]/./src/player/player.ts","webpack://[name]/./src/exception/exception.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","download_1","transform_1","player_1","Recorder","options","isplaying","lBuffer","rBuffer","tempPCM","inputSampleBits","offset","fileSize","buffer","context","window","AudioContext","webkitAudioContext","inputSampleRate","sampleRate","config","sampleBits","indexOf","numChannels","compiling","outputSampleRate","oututSampleBits","littleEdian","ArrayBuffer","DataView","setInt16","Int16Array","initUserMedia","initRecorder","_this","destroy","analyser","createAnalyser","fftSize","createScript","createScriptProcessor","createJavaScriptNode","recorder","apply","onaudioprocess","e","isrecording","ispause","vol","lData","inputBuffer","getChannelData","rData","push","Float32Array","size","length","pcm","transformIntoPCM","byteLength","Math","floor","max","duration","onprocess","onprogress","data","start","clear","navigator","mediaDevices","getUserMedia","audio","then","stream","audioInput","createMediaStreamSource","connect","destination","pause","disconnect","resume","stop","play","source","onplay","default","addPlayEnd","onplayend","getWAV","pausePlay","onpauseplay","resumePlay","onresumeplay","stopPlay","onstopplay","getWholeData","getNextData","slice","getRecordAnalyseData","prevDomainData","dataArray","Uint8Array","frequencyBinCount","getByteTimeDomainData","getPlayAnalyseData","undefined","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","resolve","reject","Error","getPCM","pcm_1","offset_1","forEach","block","len","setInt8","getInt8","PCM","flat","compress","encodePCM","getPCMBlob","Blob","downloadPCM","pcmBlob","pcmTemp","encodeWAV","getWAVBlob","type","downloadWAV","wavBlob","left","right","stopStream","closeAudioContext","getTracks","track","close","set","download","blob","oA","document","createElement","href","URL","createObjectURL","click","wavblob","writeString","str","setUint8","charCodeAt","rate","compression","result","index","j","temp","bytes","dataLength","val","min","channelCount","setUint32","setUint16","getUint8","exception_1","_source","_playTime","_playStamp","_context","_analyser","_audioData","_hasInit","_endplayFn","_playAudio","decodeAudioData","createBufferSource","onended","currentTime","throwError","Player","arraybuffer","fn","message"],"mappings":"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","file":"recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { throwError } from './exception/exception';\nimport { downloadPCM, downloadWAV } from './download/download';\nimport { compress, encodePCM, encodeWAV } from './transform/transform';\nimport Player from './player/player';\n\ndeclare let window: any;\ndeclare let Math: any;\ndeclare let document: any;\ndeclare let navigator: any;\ndeclare let Promise: any;\n\n// 构造函数参数格式\ninterface recorderConfig {\n    sampleBits?: number,        // 采样位数\n    sampleRate?: number,        // 采样率\n    numChannels?: number,       // 声道数\n    compiling?: boolean,        // 是否边录边播\n}\n\nclass Recorder {\n    private isrecording: boolean;               // 是否正在录音\n    private isplaying: boolean = false;         // 是否正在播放\n    private ispause: boolean;                   // 是否是暂停\n    private context: any;\n    private config: recorderConfig;             // 配置\n    private size: number;                       // 录音文件总长度\n    private lBuffer: Array<Float32Array> = [];  // pcm音频数据搜集器(左声道)\n    private rBuffer: Array<Float32Array> = [];  // pcm音频数据搜集器(右声道)\n    private PCM: any;                           // 最终的PCM数据缓存，避免多次encode\n    private tempPCM: Array<DataView> = [];      // 边录边转时临时存放pcm的\n    private audioInput: any;\n    private inputSampleRate: number;            // 输入采样率\n    private source: any;                        // 音频输入\n    private recorder: any;\n    private inputSampleBits: number = 16;       // 输入采样位数\n    private outputSampleRate: number;           // 输出采样率\n    private oututSampleBits: number;            // 输出采样位数\n    private analyser: any;\n    private littleEdian: boolean;               // 是否是小端字节序\n    private prevDomainData: any;                // 存放前一次图形化的数据\n    private offset: number = 0;                 // 边录边转，记录外部的获取偏移位置\n    private stream: any;                        // 流\n\n    public fileSize: number = 0;                // 录音大小，byte为单位\n    public duration: number;                    // 录音时长\n    // 正在录音时间，参数是已经录了多少时间了\n    public onprocess: (duration: number) => void;\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\n    public onprogress: (payload: {\n        duration: number,\n        fileSize: number,\n        vol: number,\n        data: Array<DataView>,      // 当前存储的所有录音数据\n    }) => void;\n    public onplay: () => void;                  // 音频播放回调\n    public onpauseplay: () => void;             // 音频暂停回调\n    public onresumeplay: () => void;            // 音频恢复播放回调\n    public onstopplay: () => void;              // 音频停止播放回调\n    public onplayend: () => void;               // 音频正常播放结束\n    /**\n     * @param {Object} options 包含以下三个参数：\n     * sampleBits，采样位数，一般8,16，默认16\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\n     * numChannels，声道，1或2\n     */\n    constructor(options: recorderConfig = {}) {\n        // 临时audioContext，为了获取输入采样率的\n        let context = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\n        // 配置config，检查值是否有问题\n        this.config = {\n            // 采样数位 8, 16\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\n            // 采样率\n            sampleRate: ~[11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\n            // 声道数，1或2\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\n            // 是否需要边录边转，默认关闭，后期使用web worker\n            compiling: !!options.compiling || false,\n        };\n        // 设置采样的参数\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\n        // 判断端字节序\n        this.littleEdian = (function() {\n            let buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            return new Int16Array(buffer)[0] === 256;\n        })();\n        // 兼容 getUserMedia\n        this.initUserMedia();\n    }\n\n    /** \n     * 初始化录音实例\n     */\n    initRecorder(): void {\n        if (this.context) {\n            // 关闭先前的录音实例，因为前次的实例会缓存少量前次的录音数据\n            this.destroy();\n        }\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\n        \n        this.analyser = this.context.createAnalyser();  // 录音分析节点\n        this.analyser.fftSize = 2048;                   // 表示存储频域的大小\n\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\n\n        // 音频采集\n        this.recorder.onaudioprocess = e => {\n            if (!this.isrecording || this.ispause) {\n                // 不在录音时不需要处理，FF 在停止录音后，仍会触发 audioprocess 事件\n                return;\n            }\n            // 左声道数据\n            // getChannelData返回Float32Array类型的pcm数据\n            let lData = e.inputBuffer.getChannelData(0),\n                rData = null,\n                vol = 0;        // 音量百分比\n\n            this.lBuffer.push(new Float32Array(lData));\n\n            this.size += lData.length;\n\n            // 判断是否有右声道数据\n            if (2 === this.config.numChannels) {\n                rData = e.inputBuffer.getChannelData(1);\n                this.rBuffer.push(new Float32Array(rData));\n\n                this.size += rData.length;\n            }\n\n            // 边录边转处理\n            if (this.config.compiling) {\n                let pcm = this.transformIntoPCM(lData, rData);\n\n                this.tempPCM.push(pcm);\n                // 计算录音大小\n                this.fileSize = pcm.byteLength * this.tempPCM.length;\n            } else {\n                // 计算录音大小\n                this.fileSize = Math.floor(this.size / Math.max( this.inputSampleRate / this.outputSampleRate, 1))\n                    * (this.oututSampleBits / 8)\n            }\n            // 为何此处计算大小需要分开计算。原因是先录后转时，是将所有数据一起处理，边录边转是单个 4096 处理，\n            // 有小数位的偏差。\n\n            // 计算音量百分比\n            vol = Math.max.apply(Math, lData) * 100;\n            // 统计录音时长\n            this.duration += 4096 / this.inputSampleRate;\n            // 录音时长回调\n            this.onprocess && this.onprocess(this.duration);\n            // 录音时长及响度回调\n            this.onprogress && this.onprogress({\n                duration: this.duration,\n                fileSize: this.fileSize,\n                vol,\n                data: this.tempPCM,     // 当前所有的pcm数据，调用者控制增量\n            });\n        }\n    }\n\n    /**\n     * 开始录音\n     *\n     * @returns {Promise<{}>}\n     * @memberof Recorder\n     */\n    start(): Promise<{}> {\n        if (this.isrecording) {\n            // 正在录音，则不允许\n            return;\n        }\n        // 清空数据\n        this.clear();\n        this.initRecorder();\n        this.isrecording = true;\n\n        return navigator.mediaDevices.getUserMedia({\n            audio: true\n        }).then(stream => {\n            // audioInput表示音频源节点\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\n            this.audioInput = this.context.createMediaStreamSource(stream);\n            this.stream = stream;\n        }/* 报错丢给外部使用者catch，后期可在此处增加建议性提示\n            , error => {\n            // 抛出异常\n            Recorder.throwError(error.name + \" : \" + error.message);\n        } */).then(() => {\n            // audioInput 为声音源，连接到处理节点 recorder\n            this.audioInput.connect(this.analyser);\n            this.analyser.connect(this.recorder);\n            // 处理节点 recorder 连接到扬声器\n            this.recorder.connect(this.context.destination);\n        });\n    }\n    \n    /**\n     * 暂停录音\n     *\n     * @memberof Recorder\n     */\n    pause(): void {\n        if (this.isrecording && !this.ispause) {\n            this.ispause = true;\n            // 当前不暂停的时候才可以暂停\n            this.recorder.disconnect();\n        }\n    }\n\n    /**\n     * 继续录音\n     *\n     * @memberof Recorder\n     */\n    resume(): void {\n        if (this.isrecording && this.ispause) {\n            this.ispause = false;\n            // 暂停的才可以开始\n            this.audioInput && this.audioInput.connect(this.analyser);\n            this.analyser.connect(this.recorder);\n            // 处理节点 recorder 连接到扬声器\n            this.recorder.connect(this.context.destination);\n        }\n    }\n\n    /**\n     * 停止录音\n     *\n     * @memberof Recorder\n     */\n    stop(): void {\n        this.isrecording = false;\n        this.audioInput && this.audioInput.disconnect();\n        this.recorder.disconnect();\n    }\n\n    /**\n     * 播放录音\n     *\n     * @memberof Recorder\n     */\n    play(): void {\n        this.stop();\n        // 关闭前一次音频播放\n        this.source && this.source.stop();\n\n        this.isplaying = true;\n\n        this.onplay();\n        Player.addPlayEnd(this.onplayend);\n        Player.play(this.getWAV().buffer);\n    }\n\n    /**\n     * 暂停播放录音\n     *\n     * @memberof Recorder\n     */\n    pausePlay(): void {\n        if (this.isrecording || !this.isplaying) {\n            // 正在录音或没有播放，暂停无效\n            return;\n        }\n\n        this.isplaying = false;\n        this.onpauseplay();\n        Player.pausePlay();\n    }\n\n    /**\n     * 恢复播放录音\n     *\n     * @memberof Recorder\n     */\n    resumePlay(): void {\n        if (this.isrecording || this.isplaying) {\n            // 正在录音或已经播放或没开始播放，恢复无效\n            return;\n        }\n\n        this.isplaying = true;\n        this.onresumeplay();\n        Player.resumePlay();\n    }\n\n    /**\n     * 停止播放\n     *\n     * @memberof Recorder\n     */\n    stopPlay(): void {\n        if (this.isrecording) {\n            // 正在录音，停止录音播放无效\n            return;\n        }\n\n        this.isplaying = false;\n        this.onstopplay();\n        Player.stopPlay();\n    }\n\n    /**\n     * 获取当前已经录音的PCM音频数据\n     *\n     * @returns[DataView]\n     * @memberof Recorder\n     */\n    getWholeData() {\n        return this.tempPCM;\n    }\n\n    /**\n     * 获取余下的新数据，不包括 getNextData 前一次获取的数据\n     *\n     * @returns [DataView]\n     * @memberof Recorder\n     */\n    getNextData() {\n        let length = this.tempPCM.length,\n            data = this.tempPCM.slice(this.offset);\n\n        this.offset = length;\n\n        return data;\n    }\n\n    /**\n     * 获取当前录音的波形数据，\n     * 调取频率由外部控制。\n     * \n     * @memberof Recorder\n     */\n    getRecordAnalyseData() {\n        if (this.ispause) {\n            // 暂停时不需要发送录音的数据，处理FF下暂停仍就获取录音数据的问题\n            // 为防止暂停后，画面空白，故返回先前的数据\n            return this.prevDomainData;\n        }\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        // 将数据拷贝到dataArray中。\n        this.analyser.getByteTimeDomainData(dataArray);\n\n        return ( this.prevDomainData = dataArray);\n    }\n\n    /**\n     * 获取录音播放时的波形数据，\n     * \n     * @memberof Recorder\n     */\n    getPlayAnalyseData() {\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\n        return this.getRecordAnalyseData();\n    }\n    \n    // getUserMedia 版本兼容\n    private initUserMedia() {\n        if (navigator.mediaDevices === undefined) {\n            navigator.mediaDevices = {};\n        }\n        \n        if (navigator.mediaDevices.getUserMedia === undefined) {\n            navigator.mediaDevices.getUserMedia = function(constraints) {\n                let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n                \n                if (!getUserMedia) {\n                    return Promise.reject(new Error('浏览器不支持 getUserMedia !'));\n                }\n                \n                return new Promise(function(resolve, reject) {\n                    getUserMedia.call(navigator, constraints, resolve, reject);\n                });\n            }\n        }\n    }\n\n    /**\n     * 获取PCM编码的二进制数据(dataview)\n     *\n     * @returns {dataview}  PCM二进制数据\n     * @memberof Recorder\n     */\n    private getPCM() {\n        if (this.tempPCM.length) {\n            // 优先使用边录边存下的\n            // 将存下的 DataView 数据合并了\n            let buffer = new ArrayBuffer( this.tempPCM.length * this.tempPCM[0].byteLength ),\n                pcm = new DataView(buffer),\n                offset = 0;\n\n            // 遍历存储数据\n            this.tempPCM.forEach((block) => {\n                for (let i = 0, len = block.byteLength; i < len; ++i) {\n                    pcm.setInt8(offset, block.getInt8(i));\n\n                    offset++;\n                }\n            });\n            // 最终的PCM数据已经有了，temp不需要了\n            this.PCM = pcm;\n            this.tempPCM = [];\n        }\n        if (this.PCM) {\n            // 给缓存\n            return this.PCM;\n        }\n        // 二维转一维\n        let data: any = this.flat();\n        // 压缩或扩展\n        data = compress(data, this.inputSampleRate, this.outputSampleRate);\n        // 按采样位数重新编码\n        return this.PCM = encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n\n    /**\n     * 获取PCM格式的blob数据\n     *\n     * @returns { blob }  PCM格式的blob数据\n     * @memberof Recorder\n     */\n    getPCMBlob() {\n        // 先停止\n        this.stop();\n        return new Blob([ this.getPCM() ]);\n    }\n\n    /**\n     * 下载录音pcm数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadPCM(name: string = 'recorder'): void {\n        let pcmBlob = this.getPCMBlob();\n        \n        downloadPCM(pcmBlob, name);\n    }\n\n    /**\n     * 获取WAV编码的二进制数据(dataview)\n     *\n     * @returns {dataview}  WAV编码的二进制数据\n     * @memberof Recorder\n     */\n    private getWAV() {\n        let pcmTemp = this.getPCM(),\n            wavTemp = encodeWAV(pcmTemp, this.inputSampleRate, \n                this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);\n\n        return wavTemp;\n    }\n\n    /**\n     * 获取WAV音频的blob数据\n     *\n     * @returns { blob }    wav格式blob数据\n     * @memberof Recorder\n     */\n    getWAVBlob() {\n        // 先停止\n        this.stop();\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\n    }\n\n    /**\n     * 下载录音的wav数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadWAV(name: string = 'recorder'): void {\n        let wavBlob = this.getWAVBlob();\n\n        downloadWAV(wavBlob, name);\n    }\n\n    /**\n     * 将获取到到左右声道的Float32Array数据编码转化\n     *\n     * @param {Float32Array} lData  左声道数据\n     * @param {Float32Array} rData  有声道数据\n     * @returns DataView\n     */\n    private transformIntoPCM(lData, rData) {\n        let lBuffer = new Float32Array(lData),\n            rBuffer = new Float32Array(rData);\n\n        let data = compress({\n            left: lBuffer,\n            right: rBuffer,\n        }, this.inputSampleRate, this.outputSampleRate);\n\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n\n    /**\n     * 销毁录音对象\n     * @memberof Recorder\n     */\n    destroy(): Promise<{}> {\n        // 结束流\n        this.stopStream();\n\n        return this.closeAudioContext();\n    }\n\n    /**\n     * 终止流（这可以让浏览器上正在录音的标志消失掉）\n     * @private\n     * @memberof Recorder\n     */\n    private stopStream() {\n        if (this.stream && this.stream.getTracks) {\n            this.stream.getTracks().forEach(track => track.stop());\n            this.stream = null;\n        }\n    }\n\n    /**\n     * close兼容方案\n     * 如firefox 30 等低版本浏览器没有 close方法\n     */\n    private closeAudioContext() {\n        if (this.context.close) {\n            return this.context.close();\n        } else {\n            return new Promise((resolve) => {\n                resolve();\n            });\n        }\n    }\n\n    /**\n     * 清空状态，重新开始录音（变量初始化）\n     *\n     * @private\n     * @memberof Recorder\n     */\n    private clear(): void {\n        this.lBuffer.length = 0;\n        this.rBuffer.length = 0;\n        this.size = 0;\n        this.fileSize = 0;\n        this.PCM = null;\n        this.audioInput = null;\n        this.duration = 0;\n        this.ispause = false;\n        this.isplaying = false;\n\n        // 录音前，关闭录音播放\n        if (this.source) {\n            this.source.stop();\n            // 重新开启录制，由于新建了 AudioContext ，source需要清空，\n            // 处理iphone 上 safari 浏览器 第二次播放报错的问题。\n            this.source = null;\n        }\n    }\n\n    /**\n     * 将二维数组转一维\n     * \n     * @private\n     * @returns  {float32array}     音频pcm二进制数据\n     * @memberof Recorder\n     */\n    private flat() {\n        let lData = null,\n            rData = new Float32Array(0);    // 右声道默认为0\n\n        // 创建存放数据的容器\n        if (1 === this.config.numChannels) {\n            lData = new Float32Array(this.size);\n        } else {\n            lData = new Float32Array(this.size / 2);\n            rData = new Float32Array(this.size / 2);\n        }\n        // 合并\n        let offset = 0; // 偏移量计算\n\n        // 将二维数据，转成一维数据\n        // 左声道\n        for (let i = 0; i < this.lBuffer.length; i++) {\n            lData.set(this.lBuffer[i], offset);\n            offset += this.lBuffer[i].length;\n        }\n\n        offset = 0;\n        // 右声道\n        for (let i = 0; i < this.rBuffer.length; i++) {\n            rData.set(this.rBuffer[i], offset);\n            offset += this.rBuffer[i].length;\n        }\n\n        return {\n            left: lData,\n            right: rData\n        };\n    }\n}\n\nexport default Recorder;\n","/**\n * 下载录音文件\n * @private\n * @param {*} blob      blob数据\n * @param {string} name 下载的文件名\n * @param {string} type 下载的文件后缀\n */\nfunction download(blob, name: string, type: string): void {\n    let oA = document.createElement('a');\n\n    oA.href = window.URL.createObjectURL(blob);\n    oA.download = `${ name }.${ type }`;\n    oA.click();\n}\n\n/**\n * 下载录音的wav数据\n *\n * @param {blob}   需要下载的blob数据类型\n * @param {string} [name='recorder']    重命名的名字\n */\nexport function downloadWAV(wavblob, name: string = 'recorder'): void {\n    download(wavblob, name, 'wav');\n}\n\n/**\n * 下载录音pcm数据\n *\n * @param {blob}   需要下载的blob数据类型\n * @param {string} [name='recorder']    重命名的名字\n * @memberof Recorder\n */\nexport function downloadPCM(pcmBlob, name: string = 'recorder'): void {\n    download(pcmBlob, name, 'pcm');\n}","interface dataview {\n    byteLength: number,\n    buffer: {\n        byteLength: number,\n    },\n    getUint8: any,\n}\n\n/**\n * 在data中的offset位置开始写入str字符串\n * @param {TypedArrays} data    二进制数据\n * @param {Number}      offset  偏移量\n * @param {String}      str     字符串\n */\nfunction writeString(data, offset, str): void {\n    for (let i = 0; i < str.length; i++) {\n        data.setUint8(offset + i, str.charCodeAt(i));\n    }\n}\n\n/**\n * 数据合并压缩\n * 根据输入和输出的采样率压缩数据，\n * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\n * 所以输入数据中每隔3取1位\n * \n * @param {float32array} data       [-1, 1]的pcm数据\n * @param {number} inputSampleRate  输入采样率\n * @param {number} outputSampleRate 输出采样率\n * @returns  {float32array}         压缩处理后的二进制数据\n */\nexport function compress(data, inputSampleRate: number, outputSampleRate: number) {\n    // 压缩，根据采样率进行压缩\n    let rate = inputSampleRate / outputSampleRate,\n        compression = Math.max(rate, 1),\n        lData = data.left,\n        rData = data.right,\n        length = Math.floor(( lData.length + rData.length ) / rate),\n        result = new Float32Array(length),\n        index = 0,\n        j = 0;\n\n    // 循环间隔 compression 位取一位数据\n    while (index < length) {\n        // 取整是因为存在比例不是整数的情况\n        let temp = Math.floor(j);\n        \n        result[index] = lData[temp];\n        index++;\n\n        if (rData.length) {\n            /*\n            * 双声道处理\n            * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\n            * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\n            */\n            result[index] = rData[temp];\n            index++;\n        }\n        \n        j += compression;\n    }\n    // 返回压缩后的一维数据\n    return result;\n}\n\n/**\n * 转换到我们需要的对应格式的编码\n * \n * @param {float32array} bytes      pcm二进制数据\n * @param {number}  sampleBits      采样位数\n * @param {boolean} littleEdian     是否是小端字节序\n * @returns {dataview}              pcm二进制数据\n */\nexport function encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\n    let offset = 0,\n        dataLength = bytes.length * (sampleBits / 8),\n        buffer = new ArrayBuffer(dataLength),\n        data = new DataView(buffer);\n\n    // 写入采样数据\n    if (sampleBits === 8) {\n        for (let i = 0; i < bytes.length; i++, offset++) {\n            // 范围[-1, 1]\n            let s = Math.max(-1, Math.min(1, bytes[i]));\n            // 8位采样位划分成2^8=256份，它的范围是0-255; \n            // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\n            let val = s < 0 ? s * 128 : s * 127;\n            val = +val + 128;\n            data.setInt8(offset, val);\n        }\n    } else {\n        for (let i = 0; i < bytes.length; i++, offset += 2) {\n            let s = Math.max(-1, Math.min(1, bytes[i]));\n            // 16位的划分的是2^16=65536份，范围是-32768到32767\n            // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\n            data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\n        }\n    }\n\n    return data;\n}\n\n/**\n * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\n * 所以，此处只需要在pcm数据前增加下就行了。\n * \n * @param {DataView} bytes           pcm二进制数据\n * @param {number}  inputSampleRate  输入采样率\n * @param {number}  outputSampleRate 输出采样率\n * @param {number}  numChannels      声道数\n * @param {number}  oututSampleBits  输出采样位数\n * @param {boolean} littleEdian      是否是小端字节序\n * @returns {DataView}               wav二进制数据\n */\nexport function encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\n    let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // 输出采样率较大时，仍使用输入的值，\n        sampleBits = oututSampleBits,\n        buffer = new ArrayBuffer(44 + bytes.byteLength),\n        data = new DataView(buffer),\n        channelCount = numChannels, // 声道\n        offset = 0;\n\n    // 资源交换文件标识符\n    writeString(data, offset, 'RIFF'); offset += 4;\n    // 下个地址开始到文件尾总字节数,即文件大小-8\n    data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\n    // WAV文件标志\n    writeString(data, offset, 'WAVE'); offset += 4;\n    // 波形格式标志\n    writeString(data, offset, 'fmt '); offset += 4;\n    // 过滤字节,一般为 0x10 = 16\n    data.setUint32(offset, 16, littleEdian); offset += 4;\n    // 格式类别 (PCM形式采样数据)\n    data.setUint16(offset, 1, littleEdian); offset += 2;\n    // 声道数\n    data.setUint16(offset, channelCount, littleEdian); offset += 2;\n    // 采样率,每秒样本数,表示每个通道的播放速度\n    data.setUint32(offset, sampleRate, littleEdian); offset += 4;\n    // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\n    data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\n    // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\n    data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\n    // 采样位数\n    data.setUint16(offset, sampleBits, littleEdian); offset += 2;\n    // 数据标识符\n    writeString(data, offset, 'data'); offset += 4;\n    // 采样数据总数,即数据总大小-44\n    data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\n    \n    // 给wav头增加pcm体\n    for (let i = 0; i < bytes.byteLength;) {\n        data.setUint8(offset, bytes.getUint8(i));\n        offset++;\n        i++;\n    }\n\n    return data;\n}","import { throwError } from '../exception/exception'\n\ndeclare let window: any;\n\nlet _source: any = null;\nlet _playTime: number = 0;\nlet _playStamp: number = 0;\nlet _context: any = null;\nlet _analyser: any = null;\n\nlet _audioData: any = null;\nlet _hasInit: boolean = false;           // 是否已经初始化了\nlet _endplayFn: any = function() {};\n\n/**\n * 初始化\n */\nfunction _init(): void {\n    _context = new (window.AudioContext || window.webkitAudioContext)();\n    _analyser = _context.createAnalyser();\n}\n\n/**\n * play\n * @returns {Promise<{}>}\n */\nfunction _playAudio(): Promise<{}> {\n    return _context.decodeAudioData(_audioData.slice(0), buffer => {\n        _source = _context.createBufferSource();\n\n        // 播放结束的事件绑定\n        _source.onended = () => {\n            _endplayFn();\n        }\n\n        // 设置数据\n        _source.buffer = buffer;\n        // connect到分析器，还是用录音的，因为播放时不能录音的\n        _source.connect(_analyser);\n        _analyser.connect(_context.destination);\n        _source.start(0, _playTime);\n\n        // 记录当前的时间戳，以备暂停时使用\n        _playStamp = _context.currentTime;\n    }, function(e) {\n        throwError(e);\n    });\n}\n\nexport default class Player {\n    /**\n     * play record\n     * @static\n     * @param {ArrayBuffer} arraybuffer\n     * @memberof Player\n     */\n    static play(arraybuffer): Promise<{}> {\n        if (!_hasInit) {\n            // 第一次播放要初始化\n            _init();\n\n            _hasInit = true;\n        }\n        this.stopPlay();\n        // 缓存播放数据\n        _audioData = arraybuffer;\n    \n        return _playAudio()\n    }\n\n    /**\n     * 暂停播放录音\n     * @memberof Player\n     */\n    static pausePlay(): void {\n        _source && _source.disconnect();\n        // 多次暂停需要累加\n        _playTime += _context.currentTime - _playStamp;\n    }\n\n    /**\n     * 恢复播放录音\n     * @memberof Player\n     */\n    static resumePlay(): Promise<{}> {\n        return _playAudio();\n    }\n\n    /**\n     * 停止播放\n     * @memberof Player\n     */\n    static stopPlay() {\n        _playTime = 0;\n        _audioData = null;\n\n        _source && _source.stop();\n    }\n\n    /**\n     * 增加录音播放完成的事件绑定\n     *\n     * @static\n     * @param {*} [fn=function() {}]\n     * @memberof Player\n     */\n    static addPlayEnd(fn: any = function() {}) {\n        _endplayFn = fn;\n    }\n}\n","/**\n * 异常处理\n * @static\n * @param {*} message   错误消息\n */\nexport function throwError(message: string) {\n    throw new Error(message);\n}\n"],"sourceRoot":""}