{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/transform/transform.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/download/download.ts","webpack://[name]/./src/player/player.ts","webpack://[name]/./src/exception/exception.ts","webpack://[name]/./src/recorder/recorder.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","writeString","data","offset","str","length","setUint8","charCodeAt","compress","inputSampleRate","outputSampleRate","rate","compression","Math","max","lData","left","rData","right","floor","result","Float32Array","index","j","temp","encodePCM","bytes","sampleBits","littleEdian","dataLength","buffer","ArrayBuffer","DataView","val","min","setInt8","setInt16","encodeWAV","numChannels","oututSampleBits","sampleRate","byteLength","channelCount","setUint32","setUint16","getUint8","download_1","transform_1","player_1","Index","_super","options","_this","isrecording","ispause","isplaying","fileSize","__extends","start","startRecord","pause","pauseRecord","resume","resumeRecord","stop","stopRecord","play","onplay","default","addPlayEnd","onplayend","getWAV","getPlayTime","pausePlay","onpauseplay","resumePlay","onresumeplay","stopPlay","onstopplay","destroy","destroyRecord","getRecordAnalyseData","getAnalyseData","getPlayAnalyseData","getPCM","getData","getPCMBlob","Blob","downloadPCM","pcmBlob","pcmTemp","config","getWAVBlob","type","downloadWAV","wavBlob","download","blob","oA","document","createElement","href","window","URL","createObjectURL","click","wavblob","exception_1","source","playTime","playStamp","context","audioData","isPaused","totalTime","endplayFn","playAudio","decodeAudioData","slice","createBufferSource","onended","currentTime","connect","destination","e","throwError","Player","arraybuffer","AudioContext","webkitAudioContext","disconnect","fn","pTime","message","Error","Recorder","size","lBuffer","rBuffer","tempPCM","inputSampleBits","duration","indexOf","Int16Array","initUserMedia","initRecorder","navigator","mediaDevices","getUserMedia","audio","then","stream","audioInput","createMediaStreamSource","analyser","recorder","stopStream","closeAudioContext","dataArray","Uint8Array","frequencyBinCount","getByteTimeDomainData","flat","clearRecordStatus","PCM","set","createAnalyser","fftSize","createScript","createScriptProcessor","createJavaScriptNode","apply","onaudioprocess","vol","inputBuffer","getChannelData","push","onprocess","onprogress","getTracks","forEach","track","close","state","Promise","resolve","undefined","constraints","webkitGetUserMedia","mozGetUserMedia","reject","transformIntoPCM"],"mappings":"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","file":"recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","interface dataview {\n    byteLength: number,\n    buffer: {\n        byteLength: number,\n    },\n    getUint8: any,\n}\n\n/**\n * 在data中的offset位置开始写入str字符串\n * @param {TypedArrays} data    二进制数据\n * @param {Number}      offset  偏移量\n * @param {String}      str     字符串\n */\nfunction writeString(data, offset, str): void {\n    for (let i = 0; i < str.length; i++) {\n        data.setUint8(offset + i, str.charCodeAt(i));\n    }\n}\n\n/**\n * 数据合并压缩\n * 根据输入和输出的采样率压缩数据，\n * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\n * 所以输入数据中每隔3取1位\n * \n * @param {float32array} data       [-1, 1]的pcm数据\n * @param {number} inputSampleRate  输入采样率\n * @param {number} outputSampleRate 输出采样率\n * @returns  {float32array}         压缩处理后的二进制数据\n */\nexport function compress(data, inputSampleRate: number, outputSampleRate: number) {\n    // 压缩，根据采样率进行压缩\n    let rate = inputSampleRate / outputSampleRate,\n        compression = Math.max(rate, 1),\n        lData = data.left,\n        rData = data.right,\n        length = Math.floor(( lData.length + rData.length ) / rate),\n        result = new Float32Array(length),\n        index = 0,\n        j = 0;\n\n    // 循环间隔 compression 位取一位数据\n    while (index < length) {\n        // 取整是因为存在比例不是整数的情况\n        let temp = Math.floor(j);\n        \n        result[index] = lData[temp];\n        index++;\n\n        if (rData.length) {\n            /*\n            * 双声道处理\n            * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\n            * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\n            */\n            result[index] = rData[temp];\n            index++;\n        }\n        \n        j += compression;\n    }\n    // 返回压缩后的一维数据\n    return result;\n}\n\n/**\n * 转换到我们需要的对应格式的编码\n * \n * @param {float32array} bytes      pcm二进制数据\n * @param {number}  sampleBits      采样位数\n * @param {boolean} littleEdian     是否是小端字节序\n * @returns {dataview}              pcm二进制数据\n */\nexport function encodePCM(bytes, sampleBits: number, littleEdian: boolean = true) {\n    let offset = 0,\n        dataLength = bytes.length * (sampleBits / 8),\n        buffer = new ArrayBuffer(dataLength),\n        data = new DataView(buffer);\n\n    // 写入采样数据\n    if (sampleBits === 8) {\n        for (let i = 0; i < bytes.length; i++, offset++) {\n            // 范围[-1, 1]\n            let s = Math.max(-1, Math.min(1, bytes[i]));\n            // 8位采样位划分成2^8=256份，它的范围是0-255; \n            // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\n            let val = s < 0 ? s * 128 : s * 127;\n            val = +val + 128;\n            data.setInt8(offset, val);\n        }\n    } else {\n        for (let i = 0; i < bytes.length; i++, offset += 2) {\n            let s = Math.max(-1, Math.min(1, bytes[i]));\n            // 16位的划分的是2^16=65536份，范围是-32768到32767\n            // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\n            data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\n        }\n    }\n\n    return data;\n}\n\n/**\n * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\n * 所以，此处只需要在pcm数据前增加下就行了。\n * \n * @param {DataView} bytes           pcm二进制数据\n * @param {number}  inputSampleRate  输入采样率\n * @param {number}  outputSampleRate 输出采样率\n * @param {number}  numChannels      声道数\n * @param {number}  oututSampleBits  输出采样位数\n * @param {boolean} littleEdian      是否是小端字节序\n * @returns {DataView}               wav二进制数据\n */\nexport function encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\n    let sampleRate = outputSampleRate > inputSampleRate ? inputSampleRate : outputSampleRate,   // 输出采样率较大时，仍使用输入的值，\n        sampleBits = oututSampleBits,\n        buffer = new ArrayBuffer(44 + bytes.byteLength),\n        data = new DataView(buffer),\n        channelCount = numChannels, // 声道\n        offset = 0;\n\n    // 资源交换文件标识符\n    writeString(data, offset, 'RIFF'); offset += 4;\n    // 下个地址开始到文件尾总字节数,即文件大小-8\n    data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\n    // WAV文件标志\n    writeString(data, offset, 'WAVE'); offset += 4;\n    // 波形格式标志\n    writeString(data, offset, 'fmt '); offset += 4;\n    // 过滤字节,一般为 0x10 = 16\n    data.setUint32(offset, 16, littleEdian); offset += 4;\n    // 格式类别 (PCM形式采样数据)\n    data.setUint16(offset, 1, littleEdian); offset += 2;\n    // 声道数\n    data.setUint16(offset, channelCount, littleEdian); offset += 2;\n    // 采样率,每秒样本数,表示每个通道的播放速度\n    data.setUint32(offset, sampleRate, littleEdian); offset += 4;\n    // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\n    data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\n    // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\n    data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\n    // 采样位数\n    data.setUint16(offset, sampleBits, littleEdian); offset += 2;\n    // 数据标识符\n    writeString(data, offset, 'data'); offset += 4;\n    // 采样数据总数,即数据总大小-44\n    data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\n    \n    // 给wav头增加pcm体\n    for (let i = 0; i < bytes.byteLength;) {\n        data.setUint8(offset, bytes.getUint8(i));\n        offset++;\n        i++;\n    }\n\n    return data;\n}","import { downloadPCM, downloadWAV } from './download/download';\nimport { compress, encodePCM, encodeWAV } from './transform/transform';\nimport Player from './player/player';\nimport Recorder from './recorder/recorder';\n\ndeclare let window: any;\ndeclare let Math: any;\ndeclare let navigator: any;\ndeclare let Promise: any;\n\n// 构造函数参数格式\ninterface recorderConfig {\n    sampleBits?: number,        // 采样位数\n    sampleRate?: number,        // 采样率\n    numChannels?: number,       // 声道数\n    compiling?: boolean,        // 是否边录边播\n}\n\nclass Index extends Recorder {\n    private isrecording: boolean = false;       // 是否正在录音\n    private ispause: boolean = false;           // 是否是暂停\n    private isplaying: boolean = false;         // 是否正在播放\n\n\n\n\n    // private context: any;\n    // private config: recorderConfig;             // 配置\n    // private size: number;                       // 录音文件总长度\n    // private lBuffer: Array<Float32Array> = [];  // pcm音频数据搜集器(左声道)\n    // private rBuffer: Array<Float32Array> = [];  // pcm音频数据搜集器(右声道)\n    // private PCM: any;                           // 最终的PCM数据缓存，避免多次encode\n    // private tempPCM: Array<DataView> = [];      // 边录边转时临时存放pcm的\n    // private audioInput: any;\n    // private inputSampleRate: number;            // 输入采样率\n    // private source: any;                        // 音频输入\n    // private recorder: any;\n    // private inputSampleBits: number = 16;       // 输入采样位数\n    // private outputSampleRate: number;           // 输出采样率\n    // private oututSampleBits: number;            // 输出采样位数\n    // private analyser: any;\n    // private littleEdian: boolean;               // 是否是小端字节序\n    private prevDomainData: any;                // 存放前一次图形化的数据\n    // private offset: number = 0;                 // 边录边转，记录外部的获取偏移位置\n    // private stream: any;                        // 流\n\n    public fileSize: number = 0;                // 录音大小，byte为单位\n    public duration: number;                    // 录音时长\n    // 正在录音时间，参数是已经录了多少时间了\n    public onprocess: (duration: number) => void;\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\n    public onprogress: (payload: {\n        duration: number,\n        fileSize: number,\n        vol: number,\n        data: Array<DataView>,      // 当前存储的所有录音数据\n    }) => void;\n    public onplay: () => void;                  // 音频播放回调\n    public onpauseplay: () => void;             // 音频暂停回调\n    public onresumeplay: () => void;            // 音频恢复播放回调\n    public onstopplay: () => void;              // 音频停止播放回调\n    public onplayend: () => void;               // 音频正常播放结束\n    /**\n     * @param {Object} options 包含以下三个参数：\n     * sampleBits，采样位数，一般8,16，默认16\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\n     * numChannels，声道，1或2\n     */\n    constructor(options: recorderConfig = {}) {\n        super(options);\n    }\n\n    /**\n     * 重新修改配置\n     *\n     * @param {recorderConfig} [options={}]\n     * @memberof Recorder\n     */\n    // public setOption(options: recorderConfig = {}) {\n    //     this.destroy();\n    //     this.config = {\n    //         // 采样数位 8, 16\n    //         sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\n    //         // 采样率\n    //         sampleRate: ~[11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\n    //         // 声道数，1或2\n    //         numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\n    //         // 是否需要边录边转，默认关闭，后期使用web worker\n    //         compiling: !!options.compiling || false,\n    //     };\n    // }\n\n    /**\n     * 开始录音\n     *\n     */\n    start(): Promise<{}> {\n        if (this.isrecording) {\n            // 正在录音，则不允许\n            return;     // 改成返回promise\n        }\n// 录音前，关闭录音播放\n        this.isrecording = true;\n        return this.startRecord();\n    }\n\n    /**\n     * 暂停录音\n     *\n     */\n    pause(): void {\n        if (this.isrecording && !this.ispause) {\n            this.ispause = true;\n            // 当前不暂停的时候才可以暂停\n            this.pauseRecord();\n        }\n    }\n\n    /**\n     * 继续录音\n     *\n     */\n    resume(): void {\n        if (this.isrecording && this.ispause) {\n            this.ispause = false;\n            this.resumeRecord();\n        }\n    }\n\n    /**\n     * 停止录音\n     *\n     * @memberof Recorder\n     */\n    stop(): void {\n        this.isrecording = false;\n        this.ispause = false;\n        this.stopRecord();\n    }\n\n    /**\n     * 播放录音\n     */\n    play(): void {\n        this.stop();\n        // 关闭前一次音频播放\n        this.isplaying = true;\n\n        this.onplay();\n        Player.addPlayEnd(this.onplayend);\n        Player.play(this.getWAV().buffer);\n    }\n\n    /**\n     * 获取已经播放了多长时间\n     */\n    getPlayTime(): number {\n        return Player.getPlayTime();\n    }\n\n    /**\n     * 暂停播放录音\n     *\n     * @memberof Recorder\n     */\n    pausePlay(): void {\n        if (this.isrecording || !this.isplaying) {\n            // 正在录音或没有播放，暂停无效\n            return;\n        }\n\n        this.isplaying = false;\n        this.onpauseplay();\n        Player.pausePlay();\n    }\n\n    /**\n     * 恢复播放录音\n     *\n     * @memberof Recorder\n     */\n    resumePlay(): void {\n        if (this.isrecording || this.isplaying) {\n            // 正在录音或已经播放或没开始播放，恢复无效\n            return;\n        }\n\n        this.isplaying = true;\n        this.onresumeplay();\n        Player.resumePlay();\n    }\n\n    /**\n     * 停止播放\n     *\n     * @memberof Recorder\n     */\n    stopPlay(): void {\n        if (this.isrecording) {\n            // 正在录音，停止录音播放无效\n            return;\n        }\n\n        this.isplaying = false;\n        this.onstopplay();\n        Player.stopPlay();\n    }\n\n    destroy(): Promise<{}> {\n        Player.stopPlay();\n\n        return this.destroyRecord();\n    }\n\n    /**\n     * 获取当前已经录音的PCM音频数据\n     *\n     * @returns[DataView]\n     * @memberof Recorder\n     */\n    // getWholeData() {\n    //     return this.tempPCM;\n    // }\n\n    /**\n     * 获取余下的新数据，不包括 getNextData 前一次获取的数据\n     *\n     * @returns [DataView]\n     * @memberof Recorder\n     */\n    // getNextData() {\n    //     let length = this.tempPCM.length,\n    //         data = this.tempPCM.slice(this.offset);\n\n    //     this.offset = length;\n\n    //     return data;\n    // }\n\n    /**\n     * 获取当前录音的波形数据，\n     * 调取频率由外部控制。\n     *\n     * @memberof Recorder\n     */\n    getRecordAnalyseData() {\n        return this.getAnalyseData();\n    }\n\n    /**\n     * 获取录音播放时的波形数据，\n     *\n     * @memberof Recorder\n     */\n    getPlayAnalyseData() {\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\n        return this.getRecordAnalyseData();\n    }\n\n    getPCM() {\n        // 先停止\n        this.stop();\n        // 二维转一维\n        let data: any = this.getData();\n        // 压缩或扩展\n        data = compress(data, this.inputSampleRate, this.outputSampleRate);\n        // 按采样位数重新编码\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n\n    /**\n     * 获取PCM格式的blob数据\n     *\n     * @returns { blob }  PCM格式的blob数据\n     * @memberof Recorder\n     */\n    getPCMBlob() {\n        return new Blob([ this.getPCM() ]);\n    }\n\n    /**\n     * 下载录音pcm数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadPCM(name: string = 'recorder'): void {\n        let pcmBlob = this.getPCMBlob();\n\n        downloadPCM(pcmBlob, name);\n    }\n\n    /**\n     * 获取WAV编码的二进制数据(dataview)\n     *\n     * @returns {dataview}  WAV编码的二进制数据\n     * @memberof Recorder\n     */\n    getWAV() {\n        let pcmTemp = this.getPCM();\n\n        return encodeWAV(pcmTemp, this.inputSampleRate,\n            this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);;\n    }\n\n    /**\n     * 获取WAV音频的blob数据\n     *\n     * @returns { blob }    wav格式blob数据\n     * @memberof Recorder\n     */\n    getWAVBlob() {\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\n    }\n\n    /**\n     * 下载录音的wav数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadWAV(name: string = 'recorder'): void {\n        let wavBlob = this.getWAVBlob();\n\n        downloadWAV(wavBlob, name);\n    }\n}\n\nexport default Index;\n","/**\n * 下载录音文件\n * @private\n * @param {*} blob      blob数据\n * @param {string} name 下载的文件名\n * @param {string} type 下载的文件后缀\n */\nfunction download(blob, name: string, type: string): void {\n    let oA = document.createElement('a');\n\n    oA.href = window.URL.createObjectURL(blob);\n    oA.download = `${ name }.${ type }`;\n    oA.click();\n}\n\n/**\n * 下载录音的wav数据\n *\n * @param {blob}   需要下载的blob数据类型\n * @param {string} [name='recorder']    重命名的名字\n */\nexport function downloadWAV(wavblob, name: string = 'recorder'): void {\n    download(wavblob, name, 'wav');\n}\n\n/**\n * 下载录音pcm数据\n *\n * @param {blob}   需要下载的blob数据类型\n * @param {string} [name='recorder']    重命名的名字\n * @memberof Recorder\n */\nexport function downloadPCM(pcmBlob, name: string = 'recorder'): void {\n    download(pcmBlob, name, 'pcm');\n}","import { throwError } from '../exception/exception'\n\ndeclare let window: any;\n\nlet source: any = null;\nlet playTime: number = 0;       // 相对时间，记录暂停位置\nlet playStamp: number = 0;      // 开始或暂停后开始的时间戳(绝对)\nlet context: any = null;\nlet analyser: any = null;\n\nlet audioData: any = null;\n// let hasInit: boolean = false;           // 是否已经初始化了\nlet isPaused: boolean = false;\nlet totalTime: number = 0;\nlet endplayFn: any = function() {};\n\n/**\n * 初始化\n */\nfunction init(): void {\n    context = new (window.AudioContext || window.webkitAudioContext)();\n    // analyser = context.createAnalyser();\n}\n\n/**\n * play\n * @returns {Promise<{}>}\n */\nfunction playAudio(): Promise<{}> {\n    isPaused = false;\n\n    return context.decodeAudioData(audioData.slice(0), buffer => {\n        source = context.createBufferSource();\n\n        // 播放结束的事件绑定\n        source.onended = () => {\n            if (!isPaused) {  // 暂停的时候也会触发该事件\n                // 计算音频总时长\n                totalTime = context.currentTime - playStamp + playTime;\n                endplayFn();\n            }\n\n        }\n\n        // 设置数据\n        source.buffer = buffer;\n        // connect到分析器，还是用录音的，因为播放时不能录音的\n        // source.connect(analyser);\n        // analyser.connect(context.destination);\n        source.connect(context.destination);\n        source.start(0, playTime);\n\n        // 记录当前的时间戳，以备暂停时使用\n        playStamp = context.currentTime;\n    }, function(e) {\n        throwError(e);\n    });\n}\n\nexport default class Player {\n    /**\n     * play record\n     * @static\n     * @param {ArrayBuffer} arraybuffer\n     * @memberof Player\n     */\n    static play(arraybuffer): Promise<{}> {\n        if (!context) {\n            // 第一次播放要初始化\n            init();\n        }\n        this.stopPlay();\n        // 缓存播放数据\n        audioData = arraybuffer;\n        totalTime = 0;\n\n        return playAudio();\n    }\n\n    /**\n     * 暂停播放录音\n     * @memberof Player\n     */\n    static pausePlay(): void {\n        source && source.disconnect();\n        // 多次暂停需要累加\n        playTime += context.currentTime - playStamp;\n        isPaused = true;\n    }\n\n    /**\n     * 恢复播放录音\n     * @memberof Player\n     */\n    static resumePlay(): Promise<{}> {\n        return playAudio();\n    }\n\n    /**\n     * 停止播放\n     * @memberof Player\n     */\n    static stopPlay() {\n        playTime = 0;\n        audioData = null;\n\n        source && source.stop();\n    }\n\n    /**\n     * 增加录音播放完成的事件绑定\n     *\n     * @static\n     * @param {*} [fn=function() {}]\n     * @memberof Player\n     */\n    static addPlayEnd(fn: any = function() {}) {\n        endplayFn = fn;\n    }\n\n    // 获取已经播放的时长\n    static getPlayTime(): number {\n        let pTime = isPaused ? playTime : context.currentTime - playStamp + playTime;\n\n        return totalTime || pTime;\n    }\n}\n","/**\n * 异常处理\n * @static\n * @param {*} message   错误消息\n */\nexport function throwError(message: string) {\n    throw new Error(message);\n}\n","import { compress, encodePCM, encodeWAV } from '../transform/transform';\n\ndeclare let window: any;\ndeclare let Math: any;\ndeclare let navigator: any;\ndeclare let Promise: any;\n\n// 构造函数参数格式\ninterface recorderConfig {\n    sampleBits?: number,        // 采样位数\n    sampleRate?: number,        // 采样率\n    numChannels?: number,       // 声道数\n    compiling?: boolean,        // 是否边录边播\n}\n\nexport default class Recorder {\n    private context: any;\n    protected config: recorderConfig;             // 配置\n\n\n\n\n    private analyser: any;\n    private size: number = 0;                       // 录音文件总长度\n    private lBuffer: Array<Float32Array> = [];  // pcm音频数据搜集器(左声道)\n    private rBuffer: Array<Float32Array> = [];  // pcm音频数据搜集器(右声道)\n    private PCM: any;                           // 最终的PCM数据缓存，避免多次encode\n    private tempPCM: Array<DataView> = [];      // 边录边转时临时存放pcm的\n    private audioInput: any;\n    protected inputSampleRate: number;            // 输入采样率\n    protected inputSampleBits: number = 16;       // 输入采样位数\n    protected outputSampleRate: number;           // 输出采样率\n    protected oututSampleBits: number;            // 输出采样位数\n    private source: any;                        // 音频输入\n    private recorder: any;\n    private stream: any;                        // 流\n    protected littleEdian: boolean;               // 是否是小端字节序\n\n    protected fileSize: number = 0;                // 录音大小，byte为单位\n    protected duration: number = 0;                    // 录音时长\n    // 正在录音时间，参数是已经录了多少时间了\n    public onprocess: (duration: number) => void;\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\n    public onprogress: (payload: {\n        duration: number,\n        fileSize: number,\n        vol: number,\n        data: Array<DataView>,      // 当前存储的所有录音数据\n    }) => void;\n    public onplay: () => void;                  // 音频播放回调\n    public onpauseplay: () => void;             // 音频暂停回调\n    public onresumeplay: () => void;            // 音频恢复播放回调\n    public onstopplay: () => void;              // 音频停止播放回调\n    public onplayend: () => void;               // 音频正常播放结束\n\n    /**\n     * @param {Object} options 包含以下三个参数：\n     * sampleBits，采样位数，一般8,16，默认16\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\n     * numChannels，声道，1或2\n     */\n    constructor(options: recorderConfig = {}) {\n        // 临时audioContext，为了获取输入采样率的\n        let context = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\n        // 配置config，检查值是否有问题\n        this.config = {\n            // 采样数位 8, 16\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\n            // 采样率\n            sampleRate: ~[11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\n            // 声道数，1或2\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\n            // 是否需要边录边转，默认关闭，后期使用web worker\n            // compiling: !!options.compiling || false,  // 先移除\n        };\n        // 设置采样的参数\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\n        // 判断端字节序\n        this.littleEdian = (function() {\n            let buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            return new Int16Array(buffer)[0] === 256;\n        })();\n        // 兼容 getUserMedia\n        this.initUserMedia();\n    }\n\n    /**\n     * 开始录音\n     *\n     * @returns {Promise<{}>}\n     * @memberof Recorder\n     */\n    startRecord(): Promise<{}> {\n        if (this.context) {\n            // 关闭先前的录音实例，因为前次的实例会缓存少量前次的录音数据\n            this.destroyRecord();\n        }\n        // 初始化\n        this.initRecorder();\n\n        return navigator.mediaDevices.getUserMedia({\n            audio: true\n        }).then(stream => {\n            // audioInput表示音频源节点\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\n            this.audioInput = this.context.createMediaStreamSource(stream);\n            this.stream = stream;\n        }/* 报错丢给外部使用者catch，后期可在此处增加建议性提示\n            , error => {\n            // 抛出异常\n            Recorder.throwError(error.name + \" : \" + error.message);\n        } */).then(() => {\n            // audioInput 为声音源，连接到处理节点 recorder\n            this.audioInput.connect(this.analyser);\n            this.analyser.connect(this.recorder);\n            // this.audioInput.connect(this.recorder);\n            // 处理节点 recorder 连接到扬声器\n            this.recorder.connect(this.context.destination);\n        });\n    }\n\n    /**\n     * 暂停录音\n     *\n     * @memberof Recorder\n     */\n    pauseRecord(): void {\n        this.recorder.disconnect();\n    }\n\n    /**\n     * 继续录音\n     *\n     * @memberof Recorder\n     */\n    resumeRecord(): void {\n        // 暂停的才可以开始\n        this.audioInput && this.audioInput.connect(this.analyser);\n        this.analyser.connect(this.recorder);\n        // this.audioInput.connect(this.recorder);\n        // 处理节点 recorder 连接到扬声器\n        this.recorder.connect(this.context.destination);\n    }\n\n    /**\n     * 停止录音\n     *\n     */\n    stopRecord(): void {\n        this.audioInput && this.audioInput.disconnect();\n        this.source && this.source.stop();\n        this.recorder.disconnect();\n    }\n\n    /**\n     * 销毁录音对象\n     *\n     */\n    destroyRecord(): Promise<{}> {\n        // 结束流\n        this.stopStream();\n\n        return this.closeAudioContext();\n    }\n\n    getAnalyseData() {\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        // 将数据拷贝到dataArray中。\n        this.analyser.getByteTimeDomainData(dataArray);\n\n        return dataArray;\n    }\n\n    getData() {\n        let data: any = this.flat();\n\n        return data;\n    }\n\n    /**\n     * 清除状态\n     *\n     */\n    private clearRecordStatus() {\n        this.lBuffer.length = 0;\n        this.rBuffer.length = 0;\n        this.size = 0;\n        this.fileSize = 0;\n        this.PCM = null;\n        this.audioInput = null;\n        this.duration = 0;\n    }\n\n    /**\n     * 将二维数组转一维\n     *\n     * @private\n     * @returns  {float32array}     音频pcm二进制数据\n     * @memberof Recorder\n     */\n    private flat() {\n        let lData = null,\n            rData = new Float32Array(0);    // 右声道默认为0\n\n        // 创建存放数据的容器\n        if (1 === this.config.numChannels) {\n            lData = new Float32Array(this.size);\n        } else {\n            lData = new Float32Array(this.size / 2);\n            rData = new Float32Array(this.size / 2);\n        }\n        // 合并\n        let offset = 0; // 偏移量计算\n\n        // 将二维数据，转成一维数据\n        // 左声道\n        for (let i = 0; i < this.lBuffer.length; i++) {\n            lData.set(this.lBuffer[i], offset);\n            offset += this.lBuffer[i].length;\n        }\n\n        offset = 0;\n        // 右声道\n        for (let i = 0; i < this.rBuffer.length; i++) {\n            rData.set(this.rBuffer[i], offset);\n            offset += this.rBuffer[i].length;\n        }\n\n        return {\n            left: lData,\n            right: rData\n        };\n    }\n\n    /**\n     * 初始化录音实例\n     */\n    private initRecorder(): void {\n        // 清空数据\n        this.clearRecordStatus();\n\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.analyser = this.context.createAnalyser();  // 录音分析节点\n        this.analyser.fftSize = 2048;                   // 表示存储频域的大小\n\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\n\n        // 音频采集\n        this.recorder.onaudioprocess = e => {\n            // if (!this.isrecording || this.ispause) {\n            //     // 不在录音时不需要处理，FF 在停止录音后，仍会触发 audioprocess 事件\n            //     return;\n            // }\n            // 左声道数据\n            // getChannelData返回Float32Array类型的pcm数据\n            let lData = e.inputBuffer.getChannelData(0),\n                rData = null,\n                vol = 0;        // 音量百分比\n\n            this.lBuffer.push(new Float32Array(lData));\n\n            this.size += lData.length;\n\n            // 判断是否有右声道数据\n            if (2 === this.config.numChannels) {\n                rData = e.inputBuffer.getChannelData(1);\n                this.rBuffer.push(new Float32Array(rData));\n\n                this.size += rData.length;\n            }\n\n            // 边录边转处理\n            // if (this.config.compiling) {\n            //     let pcm = this.transformIntoPCM(lData, rData);\n\n            //     this.tempPCM.push(pcm);\n            //     // 计算录音大小\n            //     this.fileSize = pcm.byteLength * this.tempPCM.length;\n            // } else {\n                // 计算录音大小\n                this.fileSize = Math.floor(this.size / Math.max( this.inputSampleRate / this.outputSampleRate, 1))\n                    * (this.oututSampleBits / 8)\n            // }\n            // 为何此处计算大小需要分开计算。原因是先录后转时，是将所有数据一起处理，边录边转是单个 4096 处理，\n            // 有小数位的偏差。\n\n            // 计算音量百分比\n            vol = Math.max.apply(Math, lData) * 100;\n            // 统计录音时长\n            this.duration += 4096 / this.inputSampleRate;\n            // 录音时长回调\n            this.onprocess && this.onprocess(this.duration);\n            // 录音时长及响度回调\n            this.onprogress && this.onprogress({\n                duration: this.duration,\n                fileSize: this.fileSize,\n                vol,\n                data: this.tempPCM,     // 当前所有的pcm数据，调用者控制增量\n            });\n        }\n    }\n\n    /**\n     * 终止流（这可以让浏览器上正在录音的标志消失掉）\n     * @private\n     * @memberof Recorder\n     */\n    private stopStream() {\n        if (this.stream && this.stream.getTracks) {\n            this.stream.getTracks().forEach(track => track.stop());\n            this.stream = null;\n        }\n    }\n\n    /**\n     * close兼容方案\n     * 如firefox 30 等低版本浏览器没有 close方法\n     */\n    private closeAudioContext() {\n        if (this.context.close && this.context.state !== 'closed') {\n            return this.context.close();\n        } else {\n            return new Promise((resolve) => {\n                resolve();\n            });\n        }\n    }\n\n    // getUserMedia 版本兼容\n    private initUserMedia() {\n        if (navigator.mediaDevices === undefined) {\n            navigator.mediaDevices = {};\n        }\n\n        if (navigator.mediaDevices.getUserMedia === undefined) {\n            navigator.mediaDevices.getUserMedia = function(constraints) {\n                let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n\n                if (!getUserMedia) {\n                    return Promise.reject(new Error('浏览器不支持 getUserMedia !'));\n                }\n\n                return new Promise(function(resolve, reject) {\n                    getUserMedia.call(navigator, constraints, resolve, reject);\n                });\n            }\n        }\n    }\n\n    /**\n     * 将获取到到左右声道的Float32Array数据编码转化\n     *\n     * @param {Float32Array} lData  左声道数据\n     * @param {Float32Array} rData  有声道数据\n     * @returns DataView\n     */\n    private transformIntoPCM(lData, rData) {\n        let lBuffer = new Float32Array(lData),\n            rBuffer = new Float32Array(rData);\n\n        let data = compress({\n            left: lBuffer,\n            right: rBuffer,\n        }, this.inputSampleRate, this.outputSampleRate);\n\n        return encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n}\n"],"sourceRoot":""}