{"version":3,"sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/webpack/bootstrap","webpack://[name]/./src/recorder.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Recorder","options","isplaying","lBuffer","rBuffer","tempPCM","inputSampleBits","playStamp","playTime","buffer","context","window","AudioContext","webkitAudioContext","inputSampleRate","sampleRate","config","sampleBits","indexOf","numChannels","compiling","outputSampleRate","oututSampleBits","littleEdian","ArrayBuffer","DataView","setInt16","Int16Array","initUserMedia","initRecorder","_this","destroy","analyser","createAnalyser","fftSize","createScript","createScriptProcessor","createJavaScriptNode","recorder","apply","onaudioprocess","e","isrecording","ispause","vol","lData","inputBuffer","getChannelData","rData","push","Float32Array","size","length","pcm","transformIntoPCM","Math","max","duration","onprocess","onprogress","data","start","clear","navigator","mediaDevices","getUserMedia","audio","then","stream","audioInput","createMediaStreamSource","connect","destination","pause","disconnect","resume","stop","play","source","playAudioData","pausePlay","currentTime","resumePlay","stopPlay","decodeAudioData","getWAV","createBufferSource","throwError","getRecordAnalyseData","prevDomainData","dataArray","Uint8Array","frequencyBinCount","getByteTimeDomainData","getPlayAnalyseData","undefined","constraints","webkitGetUserMedia","mozGetUserMedia","Promise","resolve","reject","Error","getPCM","byteLength","pcm_1","offset_1","forEach","block","len","setInt8","getInt8","PCM","flat","compress","encodePCM","getPCMBlob","Blob","downloadPCM","pcmBlob","download","pcmTemp","encodeWAV","getWAVBlob","type","downloadWAV","wavBlob","left","right","closeAudioContext","close","blob","oA","document","createElement","href","URL","createObjectURL","click","offset","set","playAudio","oAudio","src","compression","floor","result","index","j","bytes","dataLength","val","min","channelCount","writeString","setUint32","setUint16","setUint8","getUint8","message","str","charCodeAt","default"],"mappings":"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","file":"recorder.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Recorder\"] = factory();\n\telse\n\t\troot[\"Recorder\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","declare let window: any;\ndeclare let Math: any;\ndeclare let document: any;\ndeclare let navigator: any;\ndeclare let Promise: any;\n\n// 构造函数参数格式\ninterface recorderConfig {\n    sampleBits?: number,        // 采样位数\n    sampleRate?: number,        // 采样率\n    numChannels?: number,       // 声道数\n    compiling?: boolean,           // 是否边录边播\n}\n\ninterface dataview {\n    byteLength: number,\n    buffer: {\n        byteLength: number,\n    },\n    getUint8: any,\n}\n\nclass Recorder {\n    private isrecording: boolean;               // 是否正在录音\n    private isplaying: boolean = false;         // 是否正在播放\n    private ispause: boolean;                   // 是否是暂停\n    private context: any;\n    private config: recorderConfig;             // 配置\n    private size: number;                       // 录音文件总长度\n    private lBuffer: Array<Float32Array> = [];  // pcm音频数据搜集器(左声道)\n    private rBuffer: Array<Float32Array> = [];  // pcm音频数据搜集器(右声道)\n    private PCM: any;                           // 最终的PCM数据缓存，避免多次encode\n    private tempPCM: Array<DataView> = [];      // 边录边转时临时存放pcm的\n    private audioInput: any;\n    private inputSampleRate: number;            // 输入采样率\n    private source: any;                        // 音频输入\n    private recorder: any;\n    private inputSampleBits: number = 16;       // 输入采样位数\n    private outputSampleRate: number;           // 输出采样率\n    private oututSampleBits: number;            // 输出采样位数\n    private analyser: any;\n    private littleEdian: boolean;               // 是否是小端字节序\n    private prevDomainData: any;                // 存放前一次图形化的数据\n    private playStamp: number = 0;              // 播放录音时 AudioContext 记录的时间戳\n    private playTime: number = 0;               // 记录录音播放时长\n\n    public duration: number;                 // 录音时长\n    // 正在录音时间，参数是已经录了多少时间了\n    public onprocess: (duration: number) => void;\n    // onprocess 替代函数，保持原来的 onprocess 向下兼容\n    public onprogress: (payload: {\n        duration: number,\n        vol: number,\n        data: Array<DataView>,      // 当前存储的所有录音数据\n    }) => void;\n    /**\n     * @param {Object} options 包含以下三个参数：\n     * sampleBits，采样位数，一般8,16，默认16\n     * sampleRate，采样率，一般 11025、16000、22050、24000、44100、48000，默认为浏览器自带的采样率\n     * numChannels，声道，1或2\n     */\n    constructor(options: recorderConfig = {}) {\n        // 临时audioContext，为了获取输入采样率的\n        let context = new (window.AudioContext || window.webkitAudioContext)();\n\n        this.inputSampleRate = context.sampleRate;     // 获取当前输入的采样率\n        // 配置config，检查值是否有问题\n        this.config = {\n            // 采样数位 8, 16\n            sampleBits: ~[8, 16].indexOf(options.sampleBits) ? options.sampleBits : 16,\n            // 采样率\n            sampleRate: ~[11025, 16000, 22050, 24000, 44100, 48000].indexOf(options.sampleRate) ? options.sampleRate : this.inputSampleRate,\n            // 声道数，1或2\n            numChannels: ~[1, 2].indexOf(options.numChannels) ? options.numChannels : 1,\n            // 是否需要边录边转，默认关闭，后期使用web worker\n            compiling: !!options.compiling || false,\n        };\n        // 设置采样的参数\n        this.outputSampleRate = this.config.sampleRate;     // 输出采样率\n        this.oututSampleBits = this.config.sampleBits;      // 输出采样数位 8, 16\n        // 判断端字节序\n        this.littleEdian = (function() {\n            let buffer = new ArrayBuffer(2);\n            new DataView(buffer).setInt16(0, 256, true);\n            return new Int16Array(buffer)[0] === 256;\n        })();\n        // 兼容 getUserMedia\n        this.initUserMedia();\n    }\n\n    /** \n     * 初始化录音实例\n     */\n    initRecorder(): void {\n        if (this.context) {\n            // 关闭先前的录音实例，因为前次的实例会缓存少量前次的录音数据\n            this.destroy();\n        }\n        this.context = new (window.AudioContext || window.webkitAudioContext)();\n        \n        this.analyser = this.context.createAnalyser();  // 录音分析节点\n        this.analyser.fftSize = 2048;                   // 表示存储频域的大小\n\n        // 第一个参数表示收集采样的大小，采集完这么多后会触发 onaudioprocess 接口一次，该值一般为1024,2048,4096等，一般就设置为4096\n        // 第二，三个参数分别是输入的声道数和输出的声道数，保持一致即可。\n        let createScript = this.context.createScriptProcessor || this.context.createJavaScriptNode;\n        this.recorder = createScript.apply(this.context, [4096, this.config.numChannels, this.config.numChannels]);\n\n        // 音频采集\n        this.recorder.onaudioprocess = e => {\n            if (!this.isrecording || this.ispause) {\n                // 不在录音时不需要处理，FF 在停止录音后，仍会触发 audioprocess 事件\n                return;\n            }\n            // 左声道数据\n            // getChannelData返回Float32Array类型的pcm数据\n            let lData = e.inputBuffer.getChannelData(0),\n                rData = null,\n                vol = 0;        // 音量百分比\n\n            this.lBuffer.push(new Float32Array(lData));\n\n            this.size += lData.length;\n\n            // 判断是否有右声道数据\n            if (2 === this.config.numChannels) {\n                rData = e.inputBuffer.getChannelData(1);\n                this.rBuffer.push(new Float32Array(rData));\n\n                this.size += rData.length;\n            }\n\n            // 边录边转处理\n            if (this.config.compiling) {\n                let pcm = this.transformIntoPCM(lData, rData);\n\n                this.tempPCM.push(pcm);\n            }\n\n            // 计算音量百分比\n            vol = Math.max.apply(Math, lData) * 100;\n            // 统计录音时长\n            this.duration += 4096 / this.inputSampleRate;\n            // 录音时长回调\n            this.onprocess && this.onprocess(this.duration);\n            // 录音时长及响度回调\n            this.onprogress && this.onprogress({\n                duration: this.duration,\n                vol,\n                data: this.tempPCM,     // 当前所有的pcm数据，调用者控制增量\n            });\n        }\n    }\n\n    /**\n     * 开始录音\n     *\n     * @returns {Promise<{}>}\n     * @memberof Recorder\n     */\n    start(): Promise<{}> {\n        if (this.isrecording) {\n            // 正在录音，则不允许\n            return;\n        }\n        // 清空数据\n        this.clear();\n        this.initRecorder();\n        this.isrecording = true;\n\n        return navigator.mediaDevices.getUserMedia({\n            audio: true\n        }).then(stream => {\n            // audioInput表示音频源节点\n            // stream是通过navigator.getUserMedia获取的外部（如麦克风）stream音频输出，对于这就是输入\n            this.audioInput = this.context.createMediaStreamSource(stream);\n        }/* 报错丢给外部使用者catch，后期可在此处增加建议性提示\n            , error => {\n            // 抛出异常\n            Recorder.throwError(error.name + \" : \" + error.message);\n        } */).then(() => {\n            // audioInput 为声音源，连接到处理节点 recorder\n            this.audioInput.connect(this.analyser);\n            this.analyser.connect(this.recorder);\n            // 处理节点 recorder 连接到扬声器\n            this.recorder.connect(this.context.destination);\n        });\n    }\n    \n    /**\n     * 暂停录音\n     *\n     * @memberof Recorder\n     */\n    pause(): void {\n        if (this.isrecording && !this.ispause) {\n            this.ispause = true;\n            // 当前不暂停的时候才可以暂停\n            this.recorder.disconnect();\n        }\n    }\n\n    /**\n     * 继续录音\n     *\n     * @memberof Recorder\n     */\n    resume(): void {\n        if (this.isrecording && this.ispause) {\n            this.ispause = false;\n            // 暂停的才可以开始\n            this.audioInput && this.audioInput.connect(this.analyser);\n            this.analyser.connect(this.recorder);\n            // 处理节点 recorder 连接到扬声器\n            this.recorder.connect(this.context.destination);\n        }\n    }\n\n    /**\n     * 停止录音\n     *\n     * @memberof Recorder\n     */\n    stop(): void {\n        this.isrecording = false;\n        this.audioInput && this.audioInput.disconnect();\n        this.recorder.disconnect();\n    }\n\n    /**\n     * 播放录音\n     *\n     * @memberof Recorder\n     */\n    play(): void {\n        this.stop();\n        // 关闭前一次音频播放\n        this.source && this.source.stop();\n\n        this.isplaying = true;\n        this.playTime = 0;\n\n        this.playAudioData();\n    }\n\n    /**\n     * 暂停播放录音\n     *\n     * @memberof Recorder\n     */\n    pausePlay(): void {\n        if (this.isrecording || !this.isplaying) {\n            // 正在录音或没有播放，暂停无效\n            return;\n        }\n\n        this.source && this.source.disconnect();\n        // 多次暂停需要累加\n        this.playTime += this.context.currentTime - this.playStamp;\n        this.isplaying = false;\n    }\n\n    /**\n     * 恢复播放录音\n     *\n     * @memberof Recorder\n     */\n    resumePlay(): void {\n        if (this.isrecording || this.isplaying || 0 === this.playTime) {\n            // 正在录音或已经播放或没开始播放，恢复无效\n            return;\n        }\n\n        this.isplaying = true;\n        this.playAudioData();\n    }\n\n    /**\n     * 停止播放\n     *\n     * @memberof Recorder\n     */\n    stopPlay(): void {\n        if (this.isrecording) {\n            // 正在录音，停止录音播放无效\n            return;\n        }\n\n        this.playTime = 0;\n        this.isplaying = false;\n        this.source && this.source.stop();\n    }\n\n    /**\n     * 利用 decodeAudioData播放录音数据，每次播放都需创建，因为buffersource只能被使用一次\n     *\n     * @private\n     * @memberof Recorder\n     */\n    private playAudioData(): void {\n        this.context.decodeAudioData(this.getWAV().buffer, buffer => {\n            this.source = this.context.createBufferSource();\n\n            // 设置数据\n            this.source.buffer = buffer;\n            // connect到分析器，还是用录音的，因为播放时不能录音的\n            this.source.connect(this.analyser);\n            this.analyser.connect(this.context.destination);\n            this.source.start(0, this.playTime);\n\n            // 记录当前的时间戳，以备暂停时使用\n            this.playStamp = this.context.currentTime;\n        }, function(e) {\n            Recorder.throwError(e);\n        });\n    }\n\n    /**\n     * 获取当前录音的波形数据，\n     * 调取频率由外部控制。\n     * \n     * @memberof Recorder\n     */\n    getRecordAnalyseData() {\n        if (this.ispause) {\n            // 暂停时不需要发送录音的数据，处理FF下暂停仍就获取录音数据的问题\n            // 为防止暂停后，画面空白，故返回先前的数据\n            return this.prevDomainData;\n        }\n        let dataArray = new Uint8Array(this.analyser.frequencyBinCount);\n        // 将数据拷贝到dataArray中。\n        this.analyser.getByteTimeDomainData(dataArray);\n\n        return ( this.prevDomainData = dataArray);\n    }\n\n    /**\n     * 获取录音播放时的波形数据，\n     * \n     * @memberof Recorder\n     */\n    getPlayAnalyseData() {\n        // 现在录音和播放不允许同时进行，所有复用的录音的analyser节点。\n        return this.getRecordAnalyseData();\n    }\n    \n    // getUserMedia 版本兼容\n    private initUserMedia() {\n        if (navigator.mediaDevices === undefined) {\n            navigator.mediaDevices = {};\n        }\n        \n        if (navigator.mediaDevices.getUserMedia === undefined) {\n            navigator.mediaDevices.getUserMedia = function(constraints) {\n                let getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n                \n                if (!getUserMedia) {\n                    return Promise.reject(new Error('浏览器不支持 getUserMedia !'));\n                }\n                \n                return new Promise(function(resolve, reject) {\n                    getUserMedia.call(navigator, constraints, resolve, reject);\n                });\n            }\n        }\n    }\n\n    /**\n     * 获取PCM编码的二进制数据(dataview)\n     *\n     * @returns {dataview}  PCM二进制数据\n     * @memberof Recorder\n     */\n    private getPCM() {\n        if (this.tempPCM.length) {\n            // 优先使用边录边存下的\n            // 将存下的 DataView 数据合并了\n            let buffer = new ArrayBuffer( this.tempPCM.length * this.tempPCM[0].byteLength ),\n                pcm = new DataView(buffer),\n                offset = 0;\n\n            // 遍历存储数据\n            this.tempPCM.forEach((block) => {\n                for (let i = 0, len = block.byteLength; i < len; ++i) {\n                    pcm.setInt8(offset, block.getInt8(i));\n\n                    offset++;\n                }\n            });\n            // 最终的PCM数据已经有了，temp不需要了\n            this.PCM = pcm;\n            this.tempPCM = [];\n        }\n        if (this.PCM) {\n            // 给缓存\n            return this.PCM;\n        }\n        // 二维转一维\n        let data: any = this.flat();\n        // 压缩或扩展\n        data = Recorder.compress(data, this.inputSampleRate, this.outputSampleRate);\n        // 按采样位数重新编码\n        return this.PCM = Recorder.encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n\n    /**\n     * 获取PCM格式的blob数据\n     *\n     * @returns { blob }  PCM格式的blob数据\n     * @memberof Recorder\n     */\n    getPCMBlob() {\n        return new Blob([ this.getPCM() ]);\n    }\n\n    /**\n     * 下载录音pcm数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadPCM(name: string = 'recorder'): void {\n        // 先停止\n        this.stop();\n        let pcmBlob = this.getPCMBlob();\n        \n        this.download(pcmBlob, name, 'pcm');\n    }\n\n    /**\n     * 获取WAV编码的二进制数据(dataview)\n     *\n     * @returns {dataview}  WAV编码的二进制数据\n     * @memberof Recorder\n     */\n    private getWAV() {\n        let pcmTemp = this.getPCM(),\n            wavTemp = Recorder.encodeWAV(pcmTemp, this.inputSampleRate, \n                this.outputSampleRate, this.config.numChannels, this.oututSampleBits, this.littleEdian);\n\n        return wavTemp;\n    }\n\n    /**\n     * 获取WAV音频的blob数据\n     *\n     * @returns { blob }    wav格式blob数据\n     * @memberof Recorder\n     */\n    getWAVBlob() {\n        return new Blob([ this.getWAV() ], { type: 'audio/wav' });\n    }\n\n    /**\n     * 下载录音的wav数据\n     *\n     * @param {string} [name='recorder']    重命名的名字\n     * @memberof Recorder\n     */\n    downloadWAV(name: string = 'recorder'): void {\n        // 先停止\n        this.stop();\n        let wavBlob = this.getWAVBlob();\n        \n        this.download(wavBlob, name, 'wav');\n    }\n\n    /**\n     * 将获取到到左右声道的Float32Array数据编码转化\n     *\n     * @param {Float32Array} lData  左声道数据\n     * @param {Float32Array} rData  有声道数据\n     * @returns DataView\n     */\n    private transformIntoPCM(lData, rData) {\n        let lBuffer = new Float32Array(lData),\n            rBuffer = new Float32Array(rData);\n\n        let data = Recorder.compress({\n            left: lBuffer,\n            right: rBuffer,\n        }, this.inputSampleRate, this.outputSampleRate);\n\n        return Recorder.encodePCM(data, this.oututSampleBits, this.littleEdian);\n    }\n\n    /**\n     * 销毁录音对象\n     * @memberof Recorder\n     */\n    destroy(): Promise<{}> {\n        return this.closeAudioContext();\n    }\n\n    /**\n     * close兼容方案\n     * 如firefox 30 等低版本浏览器没有 close方法\n     */\n    private closeAudioContext() {\n        if (this.context.close) {\n            return this.context.close();\n        } else {\n            return new Promise((resolve) => {\n                resolve();\n            });\n        }\n    }\n\n    /**\n     * 下载录音文件\n     * @private\n     * @param {*} blob      blob数据\n     * @param {string} name 下载的文件名\n     * @param {string} type 下载的文件后缀\n     * @memberof Recorder\n     */\n    private download(blob, name: string, type: string): void {\n        try {\n            let oA = document.createElement('a');\n            \n            oA.href = window.URL.createObjectURL(blob);\n            oA.download = name + '.' + type;\n            oA.click();\n        } catch(e) {\n            Recorder.throwError(e);\n        }\n    }\n\n    /**\n     * 清空状态，重新开始录音（变量初始化）\n     *\n     * @private\n     * @memberof Recorder\n     */\n    private clear(): void {\n        this.lBuffer.length = 0;\n        this.rBuffer.length = 0;\n        this.size = 0;\n        this.PCM = null;\n        this.audioInput = null;\n        this.duration = 0;\n        this.ispause = false;\n        this.isplaying = false;\n        this.playTime = 0;\n\n        // 录音前，关闭录音播放\n        if (this.source) {\n            this.source.stop();\n            // 重新开启录制，由于新建了 AudioContext ，source需要清空，\n            // 处理iphone 上 safari 浏览器 第二次播放报错的问题。\n            this.source = null;\n        }\n    }\n\n    /**\n     * 将二维数组转一维\n     * \n     * @private\n     * @returns  {float32array}     音频pcm二进制数据\n     * @memberof Recorder\n     */\n    private flat() {\n        let lData = null,\n            rData = new Float32Array(0);    // 右声道默认为0\n\n        // 创建存放数据的容器\n        if (1 === this.config.numChannels) {\n            lData = new Float32Array(this.size);\n        } else {\n            lData = new Float32Array(this.size / 2);\n            rData = new Float32Array(this.size / 2);\n        }\n        // 合并\n        let offset = 0; // 偏移量计算\n\n        // 将二维数据，转成一维数据\n        // 左声道\n        for (let i = 0; i < this.lBuffer.length; i++) {\n            lData.set(this.lBuffer[i], offset);\n            offset += this.lBuffer[i].length;\n        }\n\n        offset = 0;\n        // 右声道\n        for (let i = 0; i < this.rBuffer.length; i++) {\n            rData.set(this.rBuffer[i], offset);\n            offset += this.rBuffer[i].length;\n        }\n\n        return {\n            left: lData,\n            right: rData\n        };\n    }\n\n    /** \n     * 播放外部音乐文件\n     * \n     * @param {float32array} blob    blob音频数据\n     * @memberof Recorder\n     */\n    static playAudio(blob): void {\n        let oAudio = document.createElement('audio');\n\n        oAudio.src = window.URL.createObjectURL(blob);\n        // 播放音乐\n        oAudio.play();\n    }\n\n    /**\n     * 数据合并压缩\n     * 根据输入和输出的采样率压缩数据，\n     * 比如输入的采样率是48k的，我们需要的是（输出）的是16k的，由于48k与16k是3倍关系，\n     * 所以输入数据中每隔3取1位\n     * \n     * @static\n     * @param {float32array} data       [-1, 1]的pcm数据\n     * @param {number} inputSampleRate  输入采样率\n     * @param {number} outputSampleRate 输出采样率\n     * @returns  {float32array}         压缩处理后的二进制数据\n     * @memberof Recorder\n     */\n    static compress(data, inputSampleRate: number, outputSampleRate: number) {\n        // 压缩，根据采样率进行压缩\n        let compression = Math.max(Math.floor(inputSampleRate / outputSampleRate), 1),\n            lData = data.left,\n            rData = data.right,\n            length = ( lData.length + rData.length ) / compression,\n            result = new Float32Array(length),\n            index = 0,\n            j = 0;\n\n        // 循环间隔 compression 位取一位数据\n        while (index < length) {\n            result[index] = lData[j];\n            index++;\n\n            if (rData.length) {\n                /*\n                 * 双声道处理\n                 * e.inputBuffer.getChannelData(0)得到了左声道4096个样本数据，1是右声道的数据，\n                 * 此处需要组和成LRLRLR这种格式，才能正常播放，所以要处理下\n                 */\n                result[index] = rData[j];\n                index++;\n            }\n            \n            j += compression;\n        }\n        // 返回压缩后的一维数据\n        return result;\n    }\n\n    /**\n     * 转换到我们需要的对应格式的编码\n     * \n     * @static\n     * @param {float32array} bytes      pcm二进制数据\n     * @param {number}  sampleBits      采样位数\n     * @param {boolean} littleEdian     是否是小端字节序\n     * @returns {dataview}              pcm二进制数据\n     * @memberof Recorder\n     */\n    static encodePCM(bytes, sampleBits: number, littleEdian: boolean = true)  {\n        let offset = 0,\n            dataLength = bytes.length * (sampleBits / 8),\n            buffer = new ArrayBuffer(dataLength),\n            data = new DataView(buffer);\n    \n        // 写入采样数据\n        if (sampleBits === 8) {\n            for (let i = 0; i < bytes.length; i++, offset++) {\n                // 范围[-1, 1]\n                let s = Math.max(-1, Math.min(1, bytes[i]));\n                // 8位采样位划分成2^8=256份，它的范围是0-255; \n                // 对于8位的话，负数*128，正数*127，然后整体向上平移128(+128)，即可得到[0,255]范围的数据。\n                let val = s < 0 ? s * 128 : s * 127;\n                val = +val + 128;\n                data.setInt8(offset, val);\n            }\n        } else {\n            for (let i = 0; i < bytes.length; i++, offset += 2) {\n                let s = Math.max(-1, Math.min(1, bytes[i]));\n                // 16位的划分的是2^16=65536份，范围是-32768到32767\n                // 因为我们收集的数据范围在[-1,1]，那么你想转换成16位的话，只需要对负数*32768,对正数*32767,即可得到范围在[-32768,32767]的数据。\n                data.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, littleEdian);\n            }\n        }\n    \n        return data;\n    }\n\n    /**\n     * 编码wav，一般wav格式是在pcm文件前增加44个字节的文件头，\n     * 所以，此处只需要在pcm数据前增加下就行了。\n     * \n     * @static\n     * @param {DataView} bytes           pcm二进制数据\n     * @param {number}  inputSampleRate  输入采样率\n     * @param {number}  outputSampleRate 输出采样率\n     * @param {number}  numChannels      声道数\n     * @param {number}  oututSampleBits  输出采样位数\n     * @param {boolean} littleEdian      是否是小端字节序\n     * @returns {DataView}               wav二进制数据\n     * @memberof Recorder\n     */\n    static encodeWAV(bytes: dataview, inputSampleRate: number, outputSampleRate: number, numChannels: number, oututSampleBits: number, littleEdian: boolean = true) {\n        let sampleRate = Math.min(inputSampleRate, outputSampleRate),\n            sampleBits = oututSampleBits,\n            buffer = new ArrayBuffer(44 + bytes.byteLength),\n            data = new DataView(buffer),\n            channelCount = numChannels, // 声道\n            offset = 0;\n    \n        // 资源交换文件标识符\n        writeString(data, offset, 'RIFF'); offset += 4;\n        // 下个地址开始到文件尾总字节数,即文件大小-8\n        data.setUint32(offset, 36 + bytes.byteLength, littleEdian); offset += 4;\n        // WAV文件标志\n        writeString(data, offset, 'WAVE'); offset += 4;\n        // 波形格式标志\n        writeString(data, offset, 'fmt '); offset += 4;\n        // 过滤字节,一般为 0x10 = 16\n        data.setUint32(offset, 16, littleEdian); offset += 4;\n        // 格式类别 (PCM形式采样数据)\n        data.setUint16(offset, 1, littleEdian); offset += 2;\n        // 声道数\n        data.setUint16(offset, channelCount, littleEdian); offset += 2;\n        // 采样率,每秒样本数,表示每个通道的播放速度\n        data.setUint32(offset, sampleRate, littleEdian); offset += 4;\n        // 波形数据传输率 (每秒平均字节数) 声道数 × 采样频率 × 采样位数 / 8\n        data.setUint32(offset, channelCount * sampleRate * (sampleBits / 8), littleEdian); offset += 4;\n        // 快数据调整数 采样一次占用字节数 声道数 × 采样位数 / 8\n        data.setUint16(offset, channelCount * (sampleBits / 8), littleEdian); offset += 2;\n        // 采样位数\n        data.setUint16(offset, sampleBits, littleEdian); offset += 2;\n        // 数据标识符\n        writeString(data, offset, 'data'); offset += 4;\n        // 采样数据总数,即数据总大小-44\n        data.setUint32(offset, bytes.byteLength, littleEdian); offset += 4;\n        \n        // 给wav头增加pcm体\n        for (let i = 0; i < bytes.byteLength;) {\n            data.setUint8(offset, bytes.getUint8(i));\n            offset++;\n            i++;\n        }\n    \n        return data;\n    }\n\n    /**\n     * 异常处理\n     * @static\n     * @param {*} message   错误消息\n     * @memberof Recorder\n     */\n    static throwError(message) {\n        throw new Error (message);\n    }\n}\n\n/**\n * 在data中的offset位置开始写入str字符串\n * @param {TypedArrays} data    二进制数据\n * @param {Number}      offset  偏移量\n * @param {String}      str     字符串\n */\nfunction writeString(data, offset, str): void {\n    for (let i = 0; i < str.length; i++) {\n        data.setUint8(offset + i, str.charCodeAt(i));\n    }\n}\n\nexport default Recorder;"],"sourceRoot":""}